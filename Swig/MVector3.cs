/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class MVector3 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MVector3(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MVector3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MVector3() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_MVector3(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public float x {
    set {
      NeoNativeEnginePINVOKE.MVector3_x_set(swigCPtr, value);
    } 
    get {
      float ret = NeoNativeEnginePINVOKE.MVector3_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      NeoNativeEnginePINVOKE.MVector3_y_set(swigCPtr, value);
    } 
    get {
      float ret = NeoNativeEnginePINVOKE.MVector3_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      NeoNativeEnginePINVOKE.MVector3_z_set(swigCPtr, value);
    } 
    get {
      float ret = NeoNativeEnginePINVOKE.MVector3_z_get(swigCPtr);
      return ret;
    } 
  }

  public MVector3() : this(NeoNativeEnginePINVOKE.new_MVector3__SWIG_0(), true) {
  }

  public MVector3(float newX, float newY, float newZ) : this(NeoNativeEnginePINVOKE.new_MVector3__SWIG_1(newX, newY, newZ), true) {
  }

  public MVector3(float value) : this(NeoNativeEnginePINVOKE.new_MVector3__SWIG_2(value), true) {
  }

  public MVector3(SWIGTYPE_p_float values) : this(NeoNativeEnginePINVOKE.new_MVector3__SWIG_3(SWIGTYPE_p_float.getCPtr(values)), true) {
  }

  public MVector3(MVector3 vec) : this(NeoNativeEnginePINVOKE.new_MVector3__SWIG_4(MVector3.getCPtr(vec)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MVector3(MVector4 vec) : this(NeoNativeEnginePINVOKE.new_MVector3__SWIG_5(MVector4.getCPtr(vec)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MVector3(MVector2 vec) : this(NeoNativeEnginePINVOKE.new_MVector3__SWIG_6(MVector2.getCPtr(vec)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(float newX, float newY, float newZ) {
    NeoNativeEnginePINVOKE.MVector3_set(swigCPtr, newX, newY, newZ);
  }

  public void loadIdentity() {
    NeoNativeEnginePINVOKE.MVector3_loadIdentity(swigCPtr);
  }

  public MVector3 crossProduct(MVector3 vec) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MVector3_crossProduct(swigCPtr, MVector3.getCPtr(vec)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float dotProduct(MVector3 vec) {
    float ret = NeoNativeEnginePINVOKE.MVector3_dotProduct(swigCPtr, MVector3.getCPtr(vec));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void normalize() {
    NeoNativeEnginePINVOKE.MVector3_normalize(swigCPtr);
  }

  public MVector3 getNormalized() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MVector3_getNormalized(swigCPtr), true);
    return ret;
  }

  public float getLength() {
    float ret = NeoNativeEnginePINVOKE.MVector3_getLength(swigCPtr);
    return ret;
  }

  public float getSquaredLength() {
    float ret = NeoNativeEnginePINVOKE.MVector3_getSquaredLength(swigCPtr);
    return ret;
  }

  public void rotateX(double angle) {
    NeoNativeEnginePINVOKE.MVector3_rotateX(swigCPtr, angle);
  }

  public void rotateY(double angle) {
    NeoNativeEnginePINVOKE.MVector3_rotateY(swigCPtr, angle);
  }

  public void rotateZ(double angle) {
    NeoNativeEnginePINVOKE.MVector3_rotateZ(swigCPtr, angle);
  }

  public void rotateAxis(double angle, MVector3 axis) {
    NeoNativeEnginePINVOKE.MVector3_rotateAxis(swigCPtr, angle, MVector3.getCPtr(axis));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MVector3 getRotatedX(double angle) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MVector3_getRotatedX(swigCPtr, angle), true);
    return ret;
  }

  public MVector3 getRotatedY(double angle) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MVector3_getRotatedY(swigCPtr, angle), true);
    return ret;
  }

  public MVector3 getRotatedZ(double angle) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MVector3_getRotatedZ(swigCPtr, angle), true);
    return ret;
  }

  public MVector3 getRotatedAxis(double angle, MVector3 axis) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MVector3_getRotatedAxis(swigCPtr, angle, MVector3.getCPtr(axis)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector3 lerp(MVector3 vec, float factor) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MVector3_lerp(swigCPtr, MVector3.getCPtr(vec), factor), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
