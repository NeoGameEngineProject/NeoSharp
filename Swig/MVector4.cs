/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class MVector4 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MVector4(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MVector4 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MVector4() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_MVector4(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public float x {
    set {
      NeoNativeEnginePINVOKE.MVector4_x_set(swigCPtr, value);
    } 
    get {
      float ret = NeoNativeEnginePINVOKE.MVector4_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      NeoNativeEnginePINVOKE.MVector4_y_set(swigCPtr, value);
    } 
    get {
      float ret = NeoNativeEnginePINVOKE.MVector4_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      NeoNativeEnginePINVOKE.MVector4_z_set(swigCPtr, value);
    } 
    get {
      float ret = NeoNativeEnginePINVOKE.MVector4_z_get(swigCPtr);
      return ret;
    } 
  }

  public float w {
    set {
      NeoNativeEnginePINVOKE.MVector4_w_set(swigCPtr, value);
    } 
    get {
      float ret = NeoNativeEnginePINVOKE.MVector4_w_get(swigCPtr);
      return ret;
    } 
  }

  public MVector4() : this(NeoNativeEnginePINVOKE.new_MVector4__SWIG_0(), true) {
  }

  public MVector4(float newX, float newY, float newZ, float newW) : this(NeoNativeEnginePINVOKE.new_MVector4__SWIG_1(newX, newY, newZ, newW), true) {
  }

  public MVector4(float value) : this(NeoNativeEnginePINVOKE.new_MVector4__SWIG_2(value), true) {
  }

  public MVector4(SWIGTYPE_p_float values) : this(NeoNativeEnginePINVOKE.new_MVector4__SWIG_3(SWIGTYPE_p_float.getCPtr(values)), true) {
  }

  public MVector4(MVector4 vec) : this(NeoNativeEnginePINVOKE.new_MVector4__SWIG_4(MVector4.getCPtr(vec)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MVector4(MVector3 vec) : this(NeoNativeEnginePINVOKE.new_MVector4__SWIG_5(MVector3.getCPtr(vec)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MVector4(MColor color) : this(NeoNativeEnginePINVOKE.new_MVector4__SWIG_6(MColor.getCPtr(color)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(float newX, float newY, float newZ, float newW) {
    NeoNativeEnginePINVOKE.MVector4_set(swigCPtr, newX, newY, newZ, newW);
  }

  public void loadIdentity() {
    NeoNativeEnginePINVOKE.MVector4_loadIdentity(swigCPtr);
  }

  public float dotProduct(MVector4 vec) {
    float ret = NeoNativeEnginePINVOKE.MVector4_dotProduct(swigCPtr, MVector4.getCPtr(vec));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector4 lerp(MVector4 vec, float factor) {
    MVector4 ret = new MVector4(NeoNativeEnginePINVOKE.MVector4_lerp(swigCPtr, MVector4.getCPtr(vec), factor), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
