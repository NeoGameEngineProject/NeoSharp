/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class PhysicsProperties : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PhysicsProperties(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhysicsProperties obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PhysicsProperties() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_PhysicsProperties(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PhysicsProperties() : this(NeoNativeEnginePINVOKE.new_PhysicsProperties__SWIG_0(), true) {
  }

  public PhysicsProperties(PhysicsProperties physicsProperties) : this(NeoNativeEnginePINVOKE.new_PhysicsProperties__SWIG_1(PhysicsProperties.getCPtr(physicsProperties)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteConstraint() {
    NeoNativeEnginePINVOKE.PhysicsProperties_deleteConstraint(swigCPtr);
  }

  public PhysicsConstraint createConstraint() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.PhysicsProperties_createConstraint(swigCPtr);
    PhysicsConstraint ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhysicsConstraint(cPtr, false);
    return ret;
  }

  public PhysicsConstraint getConstraint() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.PhysicsProperties_getConstraint(swigCPtr);
    PhysicsConstraint ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhysicsConstraint(cPtr, false);
    return ret;
  }

  public void setShapeId(uint shapeId) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setShapeId(swigCPtr, shapeId);
  }

  public uint getShapeId() {
    uint ret = NeoNativeEnginePINVOKE.PhysicsProperties_getShapeId(swigCPtr);
    return ret;
  }

  public void setCollisionObjectId(uint collisionObjectId) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setCollisionObjectId(swigCPtr, collisionObjectId);
  }

  public uint getCollisionObjectId() {
    uint ret = NeoNativeEnginePINVOKE.PhysicsProperties_getCollisionObjectId(swigCPtr);
    return ret;
  }

  public void setCollisionShape(COLLISION_SHAPE_TYPE collisionShape) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setCollisionShape(swigCPtr, (int)collisionShape);
  }

  public COLLISION_SHAPE_TYPE getCollisionShape() {
    COLLISION_SHAPE_TYPE ret = (COLLISION_SHAPE_TYPE)NeoNativeEnginePINVOKE.PhysicsProperties_getCollisionShape(swigCPtr);
    return ret;
  }

  public void setGhost(bool ghost) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setGhost(swigCPtr, ghost);
  }

  public bool isGhost() {
    bool ret = NeoNativeEnginePINVOKE.PhysicsProperties_isGhost(swigCPtr);
    return ret;
  }

  public void setMass(float mass) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setMass(swigCPtr, mass);
  }

  public float getMass() {
    float ret = NeoNativeEnginePINVOKE.PhysicsProperties_getMass(swigCPtr);
    return ret;
  }

  public void setFriction(float friction) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setFriction(swigCPtr, friction);
  }

  public float getFriction() {
    float ret = NeoNativeEnginePINVOKE.PhysicsProperties_getFriction(swigCPtr);
    return ret;
  }

  public void setRestitution(float restitution) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setRestitution(swigCPtr, restitution);
  }

  public float getRestitution() {
    float ret = NeoNativeEnginePINVOKE.PhysicsProperties_getRestitution(swigCPtr);
    return ret;
  }

  public void setLinearDamping(float linearDamping) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setLinearDamping(swigCPtr, linearDamping);
  }

  public float getLinearDamping() {
    float ret = NeoNativeEnginePINVOKE.PhysicsProperties_getLinearDamping(swigCPtr);
    return ret;
  }

  public void setAngularDamping(float angularDamping) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setAngularDamping(swigCPtr, angularDamping);
  }

  public float getAngularDamping() {
    float ret = NeoNativeEnginePINVOKE.PhysicsProperties_getAngularDamping(swigCPtr);
    return ret;
  }

  public void setAngularFactor(float angularFactor) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setAngularFactor(swigCPtr, angularFactor);
  }

  public float getAngularFactor() {
    float ret = NeoNativeEnginePINVOKE.PhysicsProperties_getAngularFactor(swigCPtr);
    return ret;
  }

  public void setLinearFactor(MVector3 linearFactor) {
    NeoNativeEnginePINVOKE.PhysicsProperties_setLinearFactor(swigCPtr, MVector3.getCPtr(linearFactor));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MVector3 getLinearFactor() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.PhysicsProperties_getLinearFactor(swigCPtr);
    MVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MVector3(cPtr, false);
    return ret;
  }

}
