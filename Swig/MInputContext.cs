/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class MInputContext : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MInputContext(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MInputContext obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MInputContext() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_MInputContext(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void createKey(string name) {
    NeoNativeEnginePINVOKE.MInputContext_createKey(swigCPtr, name);
  }

  public virtual void createAxis(string name, bool flush) {
    NeoNativeEnginePINVOKE.MInputContext_createAxis__SWIG_0(swigCPtr, name, flush);
  }

  public virtual void createAxis(string name) {
    NeoNativeEnginePINVOKE.MInputContext_createAxis__SWIG_1(swigCPtr, name);
  }

  public virtual void createProperty(string name) {
    NeoNativeEnginePINVOKE.MInputContext_createProperty(swigCPtr, name);
  }

  public virtual void downKey(string name) {
    NeoNativeEnginePINVOKE.MInputContext_downKey(swigCPtr, name);
  }

  public virtual void upKey(string name) {
    NeoNativeEnginePINVOKE.MInputContext_upKey(swigCPtr, name);
  }

  public virtual void setAxis(string name, float axis) {
    NeoNativeEnginePINVOKE.MInputContext_setAxis(swigCPtr, name, axis);
  }

  public virtual void setProperty(string name, int prop) {
    NeoNativeEnginePINVOKE.MInputContext_setProperty(swigCPtr, name, prop);
  }

  public virtual bool isKeyPressed(string name) {
    bool ret = NeoNativeEnginePINVOKE.MInputContext_isKeyPressed(swigCPtr, name);
    return ret;
  }

  public virtual bool onKeyDown(string name) {
    bool ret = NeoNativeEnginePINVOKE.MInputContext_onKeyDown(swigCPtr, name);
    return ret;
  }

  public virtual bool onKeyUp(string name) {
    bool ret = NeoNativeEnginePINVOKE.MInputContext_onKeyUp(swigCPtr, name);
    return ret;
  }

  public virtual float getAxis(string name) {
    float ret = NeoNativeEnginePINVOKE.MInputContext_getAxis(swigCPtr, name);
    return ret;
  }

  public virtual int getProperty(string name) {
    int ret = NeoNativeEnginePINVOKE.MInputContext_getProperty(swigCPtr, name);
    return ret;
  }

  public virtual void beginTouch(int touchID, MVector2 touchPoint) {
    NeoNativeEnginePINVOKE.MInputContext_beginTouch(swigCPtr, touchID, MVector2.getCPtr(touchPoint));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void updateTouch(int touchID, MVector2 touchPoint) {
    NeoNativeEnginePINVOKE.MInputContext_updateTouch(swigCPtr, touchID, MVector2.getCPtr(touchPoint));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void endTouch(int touchID, MVector2 touchPoint) {
    NeoNativeEnginePINVOKE.MInputContext_endTouch(swigCPtr, touchID, MVector2.getCPtr(touchPoint));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void cancelTouch(int touchID, MVector2 touchPoint) {
    NeoNativeEnginePINVOKE.MInputContext_cancelTouch(swigCPtr, touchID, MVector2.getCPtr(touchPoint));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual MVector2 getTouchPosition(int touchID) {
    MVector2 ret = new MVector2(NeoNativeEnginePINVOKE.MInputContext_getTouchPosition(swigCPtr, touchID), true);
    return ret;
  }

  public virtual MVector2 getLastTouchPosition(int touchID) {
    MVector2 ret = new MVector2(NeoNativeEnginePINVOKE.MInputContext_getLastTouchPosition(swigCPtr, touchID), true);
    return ret;
  }

  public virtual M_TOUCH_PHASE getTouchPhase(int touchID) {
    M_TOUCH_PHASE ret = (M_TOUCH_PHASE)NeoNativeEnginePINVOKE.MInputContext_getTouchPhase(swigCPtr, touchID);
    return ret;
  }

  public virtual void flush() {
    NeoNativeEnginePINVOKE.MInputContext_flush(swigCPtr);
  }

}
