/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class MPhysicsContext : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MPhysicsContext(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MPhysicsContext obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MPhysicsContext() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_MPhysicsContext(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void init(MVector3 worldMin, MVector3 worldMax) {
    NeoNativeEnginePINVOKE.MPhysicsContext_init(swigCPtr, MVector3.getCPtr(worldMin), MVector3.getCPtr(worldMax));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clear() {
    NeoNativeEnginePINVOKE.MPhysicsContext_clear(swigCPtr);
  }

  public virtual void setSimulationQuality(uint quality) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setSimulationQuality(swigCPtr, quality);
  }

  public virtual void updateSimulation() {
    NeoNativeEnginePINVOKE.MPhysicsContext_updateSimulation(swigCPtr);
  }

  public virtual void setWorldGravity(MVector3 gravity) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setWorldGravity(swigCPtr, MVector3.getCPtr(gravity));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void createGhost(SWIGTYPE_p_unsigned_int objectId, uint shapeId, MVector3 position, MQuaternion rotation) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createGhost(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(objectId), shapeId, MVector3.getCPtr(position), MQuaternion.getCPtr(rotation));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void createRigidBody(SWIGTYPE_p_unsigned_int objectId, uint shapeId, MVector3 position, MQuaternion rotation, float mass) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createRigidBody(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(objectId), shapeId, MVector3.getCPtr(position), MQuaternion.getCPtr(rotation), mass);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void activateObject(uint objectId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_activateObject(swigCPtr, objectId);
  }

  public virtual void deactivateObject(uint objectId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_deactivateObject(swigCPtr, objectId);
  }

  public virtual void deleteObject(SWIGTYPE_p_unsigned_int objectId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_deleteObject(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(objectId));
  }

  public virtual void enableObjectKinematic(uint objectId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_enableObjectKinematic(swigCPtr, objectId);
  }

  public virtual void disableObjectKinematic(uint objectId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_disableObjectKinematic(swigCPtr, objectId);
  }

  public virtual void setObjectShape(uint objectId, uint shapeId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setObjectShape(swigCPtr, objectId, shapeId);
  }

  public virtual void setObjectMass(uint objectId, float mass) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setObjectMass(swigCPtr, objectId, mass);
  }

  public virtual void setObjectRestitution(uint objectId, float restitution) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setObjectRestitution(swigCPtr, objectId, restitution);
  }

  public virtual void setObjectFriction(uint objectId, float friction) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setObjectFriction(swigCPtr, objectId, friction);
  }

  public virtual void setObjectLinearFactor(uint objectId, MVector3 linearFactor) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setObjectLinearFactor(swigCPtr, objectId, MVector3.getCPtr(linearFactor));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setObjectAngularFactor(uint objectId, float angularFactor) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setObjectAngularFactor(swigCPtr, objectId, angularFactor);
  }

  public virtual void setObjectDamping(uint objectId, float linearDamping, float angularDamping) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setObjectDamping(swigCPtr, objectId, linearDamping, angularDamping);
  }

  public virtual void setObjectTransform(uint objectId, MVector3 position, MQuaternion rotation) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setObjectTransform(swigCPtr, objectId, MVector3.getCPtr(position), MQuaternion.getCPtr(rotation));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getObjectTransform(uint objectId, MVector3 position, MQuaternion rotation) {
    NeoNativeEnginePINVOKE.MPhysicsContext_getObjectTransform(swigCPtr, objectId, MVector3.getCPtr(position), MQuaternion.getCPtr(rotation));
  }

  public virtual void setObjectUserPointer(uint objectId, SWIGTYPE_p_void userPointer) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setObjectUserPointer(swigCPtr, objectId, SWIGTYPE_p_void.getCPtr(userPointer));
  }

  public virtual SWIGTYPE_p_void getObjectUserPointer(uint objectId) {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.MPhysicsContext_getObjectUserPointer(swigCPtr, objectId);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual void addCentralForce(uint objectId, MVector3 force) {
    NeoNativeEnginePINVOKE.MPhysicsContext_addCentralForce(swigCPtr, objectId, MVector3.getCPtr(force));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getCentralForce(uint objectId, MVector3 force) {
    NeoNativeEnginePINVOKE.MPhysicsContext_getCentralForce(swigCPtr, objectId, MVector3.getCPtr(force));
  }

  public virtual void addTorque(uint objectId, MVector3 torque) {
    NeoNativeEnginePINVOKE.MPhysicsContext_addTorque(swigCPtr, objectId, MVector3.getCPtr(torque));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getTorque(uint objectId, MVector3 torque) {
    NeoNativeEnginePINVOKE.MPhysicsContext_getTorque(swigCPtr, objectId, MVector3.getCPtr(torque));
  }

  public virtual void clearForces(uint objectId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_clearForces(swigCPtr, objectId);
  }

  public virtual int isObjectInCollision(uint objectId, SWIGTYPE_p_unsigned_int collisionList, uint size) {
    int ret = NeoNativeEnginePINVOKE.MPhysicsContext_isObjectInCollision__SWIG_0(swigCPtr, objectId, SWIGTYPE_p_unsigned_int.getCPtr(collisionList), size);
    return ret;
  }

  public virtual int isObjectInCollision(uint objectId, SWIGTYPE_p_unsigned_int collisionList) {
    int ret = NeoNativeEnginePINVOKE.MPhysicsContext_isObjectInCollision__SWIG_1(swigCPtr, objectId, SWIGTYPE_p_unsigned_int.getCPtr(collisionList));
    return ret;
  }

  public virtual int isObjectInCollision(uint objectId) {
    int ret = NeoNativeEnginePINVOKE.MPhysicsContext_isObjectInCollision__SWIG_2(swigCPtr, objectId);
    return ret;
  }

  public virtual bool isObjectsCollision(uint object1Id, uint object2Id) {
    bool ret = NeoNativeEnginePINVOKE.MPhysicsContext_isObjectsCollision(swigCPtr, object1Id, object2Id);
    return ret;
  }

  public virtual bool isRayHit(MVector3 start, MVector3 end, SWIGTYPE_p_unsigned_int objectId, MVector3 point, MVector3 normal) {
    bool ret = NeoNativeEnginePINVOKE.MPhysicsContext_isRayHit__SWIG_0(swigCPtr, MVector3.getCPtr(start), MVector3.getCPtr(end), SWIGTYPE_p_unsigned_int.getCPtr(objectId), MVector3.getCPtr(point), MVector3.getCPtr(normal));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isRayHit(MVector3 start, MVector3 end, SWIGTYPE_p_unsigned_int objectId, MVector3 point) {
    bool ret = NeoNativeEnginePINVOKE.MPhysicsContext_isRayHit__SWIG_1(swigCPtr, MVector3.getCPtr(start), MVector3.getCPtr(end), SWIGTYPE_p_unsigned_int.getCPtr(objectId), MVector3.getCPtr(point));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isRayHit(MVector3 start, MVector3 end, SWIGTYPE_p_unsigned_int objectId) {
    bool ret = NeoNativeEnginePINVOKE.MPhysicsContext_isRayHit__SWIG_2(swigCPtr, MVector3.getCPtr(start), MVector3.getCPtr(end), SWIGTYPE_p_unsigned_int.getCPtr(objectId));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isRayHit(MVector3 start, MVector3 end) {
    bool ret = NeoNativeEnginePINVOKE.MPhysicsContext_isRayHit__SWIG_3(swigCPtr, MVector3.getCPtr(start), MVector3.getCPtr(end));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void createMultiShape(SWIGTYPE_p_unsigned_int shapeId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createMultiShape(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId));
  }

  public virtual void createBoxShape(SWIGTYPE_p_unsigned_int shapeId, MVector3 scale) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createBoxShape(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId), MVector3.getCPtr(scale));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void createSphereShape(SWIGTYPE_p_unsigned_int shapeId, float radius) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createSphereShape(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId), radius);
  }

  public virtual void createConeShape(SWIGTYPE_p_unsigned_int shapeId, float radius, float height) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createConeShape(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId), radius, height);
  }

  public virtual void createCapsuleShape(SWIGTYPE_p_unsigned_int shapeId, float radius, float height) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createCapsuleShape(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId), radius, height);
  }

  public virtual void createCylinderShape(SWIGTYPE_p_unsigned_int shapeId, float radius, float height) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createCylinderShape(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId), radius, height);
  }

  public virtual void createConvexHullShape(SWIGTYPE_p_unsigned_int shapeId, MVector3 vertices, uint verticesNumber, MVector3 scale) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createConvexHullShape__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId), MVector3.getCPtr(vertices), verticesNumber, MVector3.getCPtr(scale));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void createConvexHullShape(SWIGTYPE_p_unsigned_int shapeId, MVector3 vertices, uint verticesNumber) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createConvexHullShape__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId), MVector3.getCPtr(vertices), verticesNumber);
  }

  public virtual void createTriangleMeshShape(SWIGTYPE_p_unsigned_int shapeId, MVector3 vertices, uint verticesNumber, SWIGTYPE_p_void indices, uint indicesNumber, M_TYPES indicesType, MVector3 scale) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createTriangleMeshShape__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId), MVector3.getCPtr(vertices), verticesNumber, SWIGTYPE_p_void.getCPtr(indices), indicesNumber, (int)indicesType, MVector3.getCPtr(scale));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void createTriangleMeshShape(SWIGTYPE_p_unsigned_int shapeId, MVector3 vertices, uint verticesNumber, SWIGTYPE_p_void indices, uint indicesNumber, M_TYPES indicesType) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createTriangleMeshShape__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId), MVector3.getCPtr(vertices), verticesNumber, SWIGTYPE_p_void.getCPtr(indices), indicesNumber, (int)indicesType);
  }

  public virtual void deleteShape(SWIGTYPE_p_unsigned_int shapeId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_deleteShape(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(shapeId));
  }

  public virtual void addChildShape(uint multiShapeId, uint shapeId, MVector3 position, MQuaternion rotation) {
    NeoNativeEnginePINVOKE.MPhysicsContext_addChildShape(swigCPtr, multiShapeId, shapeId, MVector3.getCPtr(position), MQuaternion.getCPtr(rotation));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void createConstraint(SWIGTYPE_p_unsigned_int constraintId, uint parentObjectId, uint objectId, MVector3 pivot, bool disableParentCollision) {
    NeoNativeEnginePINVOKE.MPhysicsContext_createConstraint(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(constraintId), parentObjectId, objectId, MVector3.getCPtr(pivot), disableParentCollision);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setLinearLimit(uint constraintId, MVector3 lower, MVector3 upper) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setLinearLimit(swigCPtr, constraintId, MVector3.getCPtr(lower), MVector3.getCPtr(upper));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setAngularLimit(uint constraintId, MVector3 lower, MVector3 upper) {
    NeoNativeEnginePINVOKE.MPhysicsContext_setAngularLimit(swigCPtr, constraintId, MVector3.getCPtr(lower), MVector3.getCPtr(upper));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void deleteConstraint(SWIGTYPE_p_unsigned_int constraintId) {
    NeoNativeEnginePINVOKE.MPhysicsContext_deleteConstraint(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(constraintId));
  }

}
