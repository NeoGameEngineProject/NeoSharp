/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class MSoundContext : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MSoundContext(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MSoundContext obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MSoundContext() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_MSoundContext(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void initContext() {
    NeoNativeEnginePINVOKE.MSoundContext_initContext(swigCPtr);
  }

  public virtual void createBuffer(SWIGTYPE_p_unsigned_int bufferId) {
    NeoNativeEnginePINVOKE.MSoundContext_createBuffer(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(bufferId));
  }

  public virtual void deleteBuffer(SWIGTYPE_p_unsigned_int bufferId) {
    NeoNativeEnginePINVOKE.MSoundContext_deleteBuffer(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(bufferId));
  }

  public virtual void sendBufferSound(uint bufferId, MSound sound) {
    NeoNativeEnginePINVOKE.MSoundContext_sendBufferSound(swigCPtr, bufferId, MSound.getCPtr(sound));
  }

  public virtual void sendBufferData(uint bufferId, M_SOUND_FORMAT format, SWIGTYPE_p_void data, uint size, uint freq) {
    NeoNativeEnginePINVOKE.MSoundContext_sendBufferData(swigCPtr, bufferId, (int)format, SWIGTYPE_p_void.getCPtr(data), size, freq);
  }

  public virtual float getBufferDuration(uint bufferId) {
    float ret = NeoNativeEnginePINVOKE.MSoundContext_getBufferDuration(swigCPtr, bufferId);
    return ret;
  }

  public virtual void createSource(SWIGTYPE_p_unsigned_int sourceId, uint bufferId) {
    NeoNativeEnginePINVOKE.MSoundContext_createSource(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(sourceId), bufferId);
  }

  public virtual void deleteSource(SWIGTYPE_p_unsigned_int sourceId) {
    NeoNativeEnginePINVOKE.MSoundContext_deleteSource(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(sourceId));
  }

  public virtual void enableSourceLoop(uint sourceId) {
    NeoNativeEnginePINVOKE.MSoundContext_enableSourceLoop(swigCPtr, sourceId);
  }

  public virtual void disableSourceLoop(uint sourceId) {
    NeoNativeEnginePINVOKE.MSoundContext_disableSourceLoop(swigCPtr, sourceId);
  }

  public virtual void setSourceRelative(uint sourceId, bool relative) {
    NeoNativeEnginePINVOKE.MSoundContext_setSourceRelative(swigCPtr, sourceId, relative);
  }

  public virtual void setSourceBufferId(uint sourceId, uint bufferId) {
    NeoNativeEnginePINVOKE.MSoundContext_setSourceBufferId(swigCPtr, sourceId, bufferId);
  }

  public virtual void setSourcePosition(uint sourceId, MVector3 position) {
    NeoNativeEnginePINVOKE.MSoundContext_setSourcePosition(swigCPtr, sourceId, MVector3.getCPtr(position));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setSourceRadius(uint sourceId, float radius) {
    NeoNativeEnginePINVOKE.MSoundContext_setSourceRadius(swigCPtr, sourceId, radius);
  }

  public virtual void setSourcePitch(uint sourceId, float pitch) {
    NeoNativeEnginePINVOKE.MSoundContext_setSourcePitch(swigCPtr, sourceId, pitch);
  }

  public virtual void setSourceGain(uint sourceId, float gain) {
    NeoNativeEnginePINVOKE.MSoundContext_setSourceGain(swigCPtr, sourceId, gain);
  }

  public virtual void setSourceRolloff(uint sourceId, float rolloff) {
    NeoNativeEnginePINVOKE.MSoundContext_setSourceRolloff(swigCPtr, sourceId, rolloff);
  }

  public virtual void setSourceOffset(uint sourceId, float offset) {
    NeoNativeEnginePINVOKE.MSoundContext_setSourceOffset(swigCPtr, sourceId, offset);
  }

  public virtual float getSourceOffset(uint sourceId) {
    float ret = NeoNativeEnginePINVOKE.MSoundContext_getSourceOffset(swigCPtr, sourceId);
    return ret;
  }

  public virtual void playSource(uint sourceId) {
    NeoNativeEnginePINVOKE.MSoundContext_playSource(swigCPtr, sourceId);
  }

  public virtual void pauseSource(uint sourceId) {
    NeoNativeEnginePINVOKE.MSoundContext_pauseSource(swigCPtr, sourceId);
  }

  public virtual void stopSource(uint sourceId) {
    NeoNativeEnginePINVOKE.MSoundContext_stopSource(swigCPtr, sourceId);
  }

  public virtual bool isSourcePaused(uint sourceId) {
    bool ret = NeoNativeEnginePINVOKE.MSoundContext_isSourcePaused(swigCPtr, sourceId);
    return ret;
  }

  public virtual bool isSourcePlaying(uint sourceId) {
    bool ret = NeoNativeEnginePINVOKE.MSoundContext_isSourcePlaying(swigCPtr, sourceId);
    return ret;
  }

  public virtual float getSourceTimePos(uint sourceId) {
    float ret = NeoNativeEnginePINVOKE.MSoundContext_getSourceTimePos(swigCPtr, sourceId);
    return ret;
  }

  public virtual void queueSourceBuffer(uint sourceId, SWIGTYPE_p_unsigned_int buffers, uint bufferSize) {
    NeoNativeEnginePINVOKE.MSoundContext_queueSourceBuffer(swigCPtr, sourceId, SWIGTYPE_p_unsigned_int.getCPtr(buffers), bufferSize);
  }

  public virtual void unqueueSourceBuffer(uint sourceId, SWIGTYPE_p_unsigned_int buffers, uint bufferSize) {
    NeoNativeEnginePINVOKE.MSoundContext_unqueueSourceBuffer(swigCPtr, sourceId, SWIGTYPE_p_unsigned_int.getCPtr(buffers), bufferSize);
  }

  public virtual uint getSourceBuffersQueued(uint sourceId) {
    uint ret = NeoNativeEnginePINVOKE.MSoundContext_getSourceBuffersQueued(swigCPtr, sourceId);
    return ret;
  }

  public virtual uint getSourceBuffersProcessed(uint sourceId) {
    uint ret = NeoNativeEnginePINVOKE.MSoundContext_getSourceBuffersProcessed(swigCPtr, sourceId);
    return ret;
  }

  public virtual void updateListenerPosition(MVector3 position, MVector3 direction, MVector3 up) {
    NeoNativeEnginePINVOKE.MSoundContext_updateListenerPosition(swigCPtr, MVector3.getCPtr(position), MVector3.getCPtr(direction), MVector3.getCPtr(up));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

}
