/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class MImage : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MImage(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MImage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MImage() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_MImage(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public MImage() : this(NeoNativeEnginePINVOKE.new_MImage(), true) {
  }

  public void create(M_TYPES dataType, uint width, uint height, uint components) {
    NeoNativeEnginePINVOKE.MImage_create(swigCPtr, (int)dataType, width, height, components);
  }

  public void clear(SWIGTYPE_p_void color) {
    NeoNativeEnginePINVOKE.MImage_clear(swigCPtr, SWIGTYPE_p_void.getCPtr(color));
  }

  public void readPixel(uint x, uint y, SWIGTYPE_p_void color) {
    NeoNativeEnginePINVOKE.MImage_readPixel(swigCPtr, x, y, SWIGTYPE_p_void.getCPtr(color));
  }

  public void writePixel(uint x, uint y, SWIGTYPE_p_void color) {
    NeoNativeEnginePINVOKE.MImage_writePixel(swigCPtr, x, y, SWIGTYPE_p_void.getCPtr(color));
  }

  public SWIGTYPE_p_void getData() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.MImage_getData(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public M_TYPES getDataType() {
    M_TYPES ret = (M_TYPES)NeoNativeEnginePINVOKE.MImage_getDataType(swigCPtr);
    return ret;
  }

  public uint getComponents() {
    uint ret = NeoNativeEnginePINVOKE.MImage_getComponents(swigCPtr);
    return ret;
  }

  public uint getWidth() {
    uint ret = NeoNativeEnginePINVOKE.MImage_getWidth(swigCPtr);
    return ret;
  }

  public uint getHeight() {
    uint ret = NeoNativeEnginePINVOKE.MImage_getHeight(swigCPtr);
    return ret;
  }

  public uint getSize() {
    uint ret = NeoNativeEnginePINVOKE.MImage_getSize(swigCPtr);
    return ret;
  }

}
