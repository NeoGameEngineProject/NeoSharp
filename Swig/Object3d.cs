/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class Object3d : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Object3d(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Object3d obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Object3d() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_Object3d(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Object3d() : this(NeoNativeEnginePINVOKE.new_Object3d__SWIG_0(), true) {
  }

  public Object3d(Object3d arg0) : this(NeoNativeEnginePINVOKE.new_Object3d__SWIG_1(Object3d.getCPtr(arg0)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateMatrix() {
    NeoNativeEnginePINVOKE.Object3d_updateMatrix(swigCPtr);
  }

  public void computeLocalMatrix() {
    NeoNativeEnginePINVOKE.Object3d_computeLocalMatrix(swigCPtr);
  }

  public MMatrix4x4 getMatrix() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.Object3d_getMatrix(swigCPtr);
    MMatrix4x4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MMatrix4x4(cPtr, false);
    return ret;
  }

  public void unlinkChilds() {
    NeoNativeEnginePINVOKE.Object3d_unlinkChilds(swigCPtr);
  }

  public void computeChildsMatrices() {
    NeoNativeEnginePINVOKE.Object3d_computeChildsMatrices(swigCPtr);
  }

  public void setAttribute(string name, SWIGTYPE_p_NeoVariable variable) {
    NeoNativeEnginePINVOKE.Object3d_setAttribute(swigCPtr, name, SWIGTYPE_p_NeoVariable.getCPtr(variable));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_NeoVariable getAttribute(string name) {
    SWIGTYPE_p_NeoVariable ret = new SWIGTYPE_p_NeoVariable(NeoNativeEnginePINVOKE.Object3d_getAttribute(swigCPtr, name), true);
    return ret;
  }

  public MVector3 getUniformRotatedVector(MVector3 vector) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getUniformRotatedVector(swigCPtr, MVector3.getCPtr(vector)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector3 getInverseRotatedVector(MVector3 vector) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getInverseRotatedVector(swigCPtr, MVector3.getCPtr(vector)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector3 getRotatedVector(MVector3 vector) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getRotatedVector(swigCPtr, MVector3.getCPtr(vector)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector3 getInversePosition(MVector3 position) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getInversePosition(swigCPtr, MVector3.getCPtr(position)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector3 getTransformedVector(MVector3 vector) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getTransformedVector(swigCPtr, MVector3.getCPtr(vector)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPosition(MVector3 position) {
    NeoNativeEnginePINVOKE.Object3d_setPosition(swigCPtr, MVector3.getCPtr(position));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MVector3 getTransformedPosition() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getTransformedPosition(swigCPtr), true);
    return ret;
  }

  public MVector3 getPosition() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getPosition(swigCPtr), true);
    return ret;
  }

  public void setEulerRotation(MVector3 euler) {
    NeoNativeEnginePINVOKE.Object3d_setEulerRotation(swigCPtr, MVector3.getCPtr(euler));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAxisAngleRotation(MVector3 axis, float angle) {
    NeoNativeEnginePINVOKE.Object3d_setAxisAngleRotation(swigCPtr, MVector3.getCPtr(axis), angle);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addAxisAngleRotation(MVector3 axis, float angle) {
    NeoNativeEnginePINVOKE.Object3d_addAxisAngleRotation(swigCPtr, MVector3.getCPtr(axis), angle);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRotation(MQuaternion rotation) {
    NeoNativeEnginePINVOKE.Object3d_setRotation(swigCPtr, MQuaternion.getCPtr(rotation));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MVector3 getTransformedRotation() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getTransformedRotation(swigCPtr), true);
    return ret;
  }

  public MVector3 getEulerRotation() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getEulerRotation(swigCPtr), true);
    return ret;
  }

  public MQuaternion getRotation() {
    MQuaternion ret = new MQuaternion(NeoNativeEnginePINVOKE.Object3d_getRotation(swigCPtr), true);
    return ret;
  }

  public void setScale(MVector3 scale) {
    NeoNativeEnginePINVOKE.Object3d_setScale(swigCPtr, MVector3.getCPtr(scale));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public MVector3 getTransformedScale() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getTransformedScale(swigCPtr), true);
    return ret;
  }

  public MVector3 getScale() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.Object3d_getScale(swigCPtr), true);
    return ret;
  }

  public void linkTo(Object3d parent) {
    NeoNativeEnginePINVOKE.Object3d_linkTo(swigCPtr, Object3d.getCPtr(parent));
  }

  public void unLink() {
    NeoNativeEnginePINVOKE.Object3d_unLink(swigCPtr);
  }

  public void setParent(Object3d arg0) {
    NeoNativeEnginePINVOKE.Object3d_setParent(swigCPtr, Object3d.getCPtr(arg0));
  }

  public void addChild(Object3d child) {
    NeoNativeEnginePINVOKE.Object3d_addChild(swigCPtr, Object3d.getCPtr(child));
  }

  public bool hasParent() {
    bool ret = NeoNativeEnginePINVOKE.Object3d_hasParent(swigCPtr);
    return ret;
  }

  public uint getChildsNumber() {
    uint ret = NeoNativeEnginePINVOKE.Object3d_getChildsNumber(swigCPtr);
    return ret;
  }

  public Object3d getParent() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.Object3d_getParent(swigCPtr);
    Object3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object3d(cPtr, false);
    return ret;
  }

  public Object3d getChild(uint id) {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.Object3d_getChild(swigCPtr, id);
    Object3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new Object3d(cPtr, false);
    return ret;
  }

  public uint getId() {
    uint ret = NeoNativeEnginePINVOKE.Object3d_getId(swigCPtr);
    return ret;
  }

  public void setId(uint id) {
    NeoNativeEnginePINVOKE.Object3d_setId(swigCPtr, id);
  }

  public void updateBehaviors() {
    NeoNativeEnginePINVOKE.Object3d_updateBehaviors(swigCPtr);
  }

  public void drawBehaviors() {
    NeoNativeEnginePINVOKE.Object3d_drawBehaviors(swigCPtr);
  }

  public void deleteBehavior(uint id) {
    NeoNativeEnginePINVOKE.Object3d_deleteBehavior(swigCPtr, id);
  }

  public void invertBehavior(uint idA, uint idB) {
    NeoNativeEnginePINVOKE.Object3d_invertBehavior(swigCPtr, idA, idB);
  }

  public void changeBehavior(uint id, SWIGTYPE_p_Behavior behavior) {
    NeoNativeEnginePINVOKE.Object3d_changeBehavior(swigCPtr, id, SWIGTYPE_p_Behavior.getCPtr(behavior));
  }

  public void addBehavior(SWIGTYPE_p_Behavior behavior) {
    NeoNativeEnginePINVOKE.Object3d_addBehavior(swigCPtr, SWIGTYPE_p_Behavior.getCPtr(behavior));
  }

  public uint getBehaviorsNumber() {
    uint ret = NeoNativeEnginePINVOKE.Object3d_getBehaviorsNumber(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Behavior getBehavior(uint id) {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.Object3d_getBehavior(swigCPtr, id);
    SWIGTYPE_p_Behavior ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Behavior(cPtr, false);
    return ret;
  }

  public bool needToUpdate() {
    bool ret = NeoNativeEnginePINVOKE.Object3d_needToUpdate(swigCPtr);
    return ret;
  }

  public virtual void setActive(bool active) {
    NeoNativeEnginePINVOKE.Object3d_setActive(swigCPtr, active);
  }

  public bool isActive() {
    bool ret = NeoNativeEnginePINVOKE.Object3d_isActive(swigCPtr);
    return ret;
  }

  public void setVisible(bool visible) {
    NeoNativeEnginePINVOKE.Object3d_setVisible(swigCPtr, visible);
  }

  public bool isVisible() {
    bool ret = NeoNativeEnginePINVOKE.Object3d_isVisible(swigCPtr);
    return ret;
  }

  public virtual void updateVisibility(OCamera camera) {
    NeoNativeEnginePINVOKE.Object3d_updateVisibility(swigCPtr, OCamera.getCPtr(camera));
  }

  public void setName(string name) {
    NeoNativeEnginePINVOKE.Object3d_setName(swigCPtr, name);
  }

  public string getName() {
    string ret = NeoNativeEnginePINVOKE.Object3d_getName(swigCPtr);
    return ret;
  }

  public virtual int getType() {
    int ret = NeoNativeEnginePINVOKE.Object3d_getType(swigCPtr);
    return ret;
  }

  public virtual void update() {
    NeoNativeEnginePINVOKE.Object3d_update(swigCPtr);
  }

}
