/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_NeoNativeEngine(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_NeoNativeEngine(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_NeoNativeEngine(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


	#include <NeoEngine.h>
	using namespace Neo;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT double SWIGSTDCALL CSharp_M_PI_get() {
  double jresult ;
  double result;
  
  result = (double)(3.14159265358979323846);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DEG_TO_RAD_get() {
  double jresult ;
  double result;
  
  result = (double)(((3.14159265358979323846*2)/360.0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RAD_TO_DEG_get() {
  double jresult ;
  double result;
  
  result = (double)((1.0/((3.14159265358979323846*2)/360.0)));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_getNextPowerOfTwo(unsigned int jarg1) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int result;
  
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int)getNextPowerOfTwo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_loopFloat(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)loopFloat(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRange_start_set(void * jarg1, int jarg2) {
  MRange *arg1 = (MRange *) 0 ;
  int arg2 ;
  
  arg1 = (MRange *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MRange_start_get(void * jarg1) {
  int jresult ;
  MRange *arg1 = (MRange *) 0 ;
  int result;
  
  arg1 = (MRange *)jarg1; 
  result = (int) ((arg1)->start);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRange_end_set(void * jarg1, int jarg2) {
  MRange *arg1 = (MRange *) 0 ;
  int arg2 ;
  
  arg1 = (MRange *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MRange_end_get(void * jarg1) {
  int jresult ;
  MRange *arg1 = (MRange *) 0 ;
  int result;
  
  arg1 = (MRange *)jarg1; 
  result = (int) ((arg1)->end);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MRange() {
  void * jresult ;
  MRange *result = 0 ;
  
  result = (MRange *)new MRange();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MRange(void * jarg1) {
  MRange *arg1 = (MRange *) 0 ;
  
  arg1 = (MRange *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sortFloatList__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int *arg1 ;
  float *arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (int *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  sortFloatList(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_sortFloatList__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  float *arg1 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (float *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  sortFloatList(arg1,arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isBoxToBoxCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  MVector3 *arg4 = 0 ;
  bool result;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)isBoxToBoxCollision((MVector3 const &)*arg1,(MVector3 const &)*arg2,(MVector3 const &)*arg3,(MVector3 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isBoxToBox2dCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MVector2 *arg1 = 0 ;
  MVector2 *arg2 = 0 ;
  MVector2 *arg3 = 0 ;
  MVector2 *arg4 = 0 ;
  bool result;
  
  arg1 = (MVector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (MVector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)isBoxToBox2dCollision((MVector2 const &)*arg1,(MVector2 const &)*arg2,(MVector2 const &)*arg3,(MVector2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isPointInBox(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)isPointInBox((MVector3 const &)*arg1,(MVector3 const &)*arg2,(MVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isPointInBox2d(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MVector2 *arg1 = 0 ;
  MVector2 *arg2 = 0 ;
  MVector2 *arg3 = 0 ;
  bool result;
  
  arg1 = (MVector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  result = (bool)isPointInBox2d((MVector2 const &)*arg1,(MVector2 const &)*arg2,(MVector2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isEdgeToBoxCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  MVector3 *arg4 = 0 ;
  bool result;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)isEdgeToBoxCollision((MVector3 const &)*arg1,(MVector3 const &)*arg2,(MVector3 const &)*arg3,(MVector3 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isEdgeToEdge2dIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  MVector2 *arg1 = 0 ;
  MVector2 *arg2 = 0 ;
  MVector2 *arg3 = 0 ;
  MVector2 *arg4 = 0 ;
  MVector2 *arg5 = (MVector2 *) 0 ;
  bool result;
  
  arg1 = (MVector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (MVector2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg5 = (MVector2 *)jarg5; 
  result = (bool)isEdgeToEdge2dIntersection((MVector2 const &)*arg1,(MVector2 const &)*arg2,(MVector2 const &)*arg3,(MVector2 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isPointInTriangle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  MVector3 *arg4 = 0 ;
  MVector3 *arg5 = 0 ;
  bool result;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (MVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)isPointInTriangle((MVector3 const &)*arg1,(MVector3 const &)*arg2,(MVector3 const &)*arg3,(MVector3 const &)*arg4,(MVector3 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isLineCircleIntersection(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  MVector2 *arg1 = 0 ;
  MVector2 *arg2 = 0 ;
  MVector2 *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (MVector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)isLineCircleIntersection((MVector2 const &)*arg1,(MVector2 const &)*arg2,(MVector2 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isRaySphereIntersection(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  float arg4 ;
  MVector3 *arg5 = (MVector3 *) 0 ;
  bool result;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (MVector3 *)jarg5; 
  result = (bool)isRaySphereIntersection((MVector3 const &)*arg1,(MVector3 const &)*arg2,(MVector3 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isRayPlaneIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  MVector3 *arg4 = 0 ;
  MVector3 *arg5 = (MVector3 *) 0 ;
  bool result;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (MVector3 *)jarg5; 
  result = (bool)isRayPlaneIntersection((MVector3 const &)*arg1,(MVector3 const &)*arg2,(MVector3 const &)*arg3,(MVector3 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isEdgePlaneIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  MVector3 *arg4 = 0 ;
  MVector3 *arg5 = (MVector3 *) 0 ;
  bool result;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (MVector3 *)jarg5; 
  result = (bool)isEdgePlaneIntersection((MVector3 const &)*arg1,(MVector3 const &)*arg2,(MVector3 const &)*arg3,(MVector3 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_isEdgeTriangleIntersection(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  MVector3 *arg4 = 0 ;
  MVector3 *arg5 = 0 ;
  MVector3 *arg6 = 0 ;
  MVector3 *arg7 = (MVector3 *) 0 ;
  bool result;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (MVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (MVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg7 = (MVector3 *)jarg7; 
  result = (bool)isEdgeTriangleIntersection((MVector3 const &)*arg1,(MVector3 const &)*arg2,(MVector3 const &)*arg3,(MVector3 const &)*arg4,(MVector3 const &)*arg5,(MVector3 const &)*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getTriangleNormal(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  MVector3 result;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = getTriangleNormal((MVector3 const &)*arg1,(MVector3 const &)*arg2,(MVector3 const &)*arg3);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_simplifyDP(float jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5) {
  float arg1 ;
  MVector3 *arg2 = (MVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (MVector3 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  simplifyDP(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_linearInterpolation(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)linearInterpolation(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_cubicInterpolation(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (float)cubicInterpolation(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CatmullRomInterpolation(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (float)CatmullRomInterpolation(arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HermiteInterpolation__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned int jarg8, unsigned int jarg9) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool arg9 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  result = (float)HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HermiteInterpolation__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned int jarg8) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (float)HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HermiteInterpolation__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (float)HermiteInterpolation(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HueToRGB(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)HueToRGB(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RGBToHSV(void * jarg1) {
  void * jresult ;
  MVector3 arg1 ;
  MVector3 *argp1 ;
  MVector3 result;
  
  argp1 = (MVector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = RGBToHSV(arg1);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSVToRGB(void * jarg1) {
  void * jresult ;
  MVector3 arg1 ;
  MVector3 *argp1 ;
  MVector3 result;
  
  argp1 = (MVector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = HSVToRGB(arg1);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RGBToHSL(void * jarg1) {
  void * jresult ;
  MVector3 arg1 ;
  MVector3 *argp1 ;
  MVector3 result;
  
  argp1 = (MVector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = RGBToHSL(arg1);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HSLToRGB(void * jarg1) {
  void * jresult ;
  MVector3 arg1 ;
  MVector3 *argp1 ;
  MVector3 result;
  
  argp1 = (MVector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = HSLToRGB(arg1);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector2_x_set(void * jarg1, float jarg2) {
  MVector2 *arg1 = (MVector2 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector2_x_get(void * jarg1) {
  float jresult ;
  MVector2 *arg1 = (MVector2 *) 0 ;
  float result;
  
  arg1 = (MVector2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector2_y_set(void * jarg1, float jarg2) {
  MVector2 *arg1 = (MVector2 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector2_y_get(void * jarg1) {
  float jresult ;
  MVector2 *arg1 = (MVector2 *) 0 ;
  float result;
  
  arg1 = (MVector2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector2__SWIG_0() {
  void * jresult ;
  MVector2 *result = 0 ;
  
  result = (MVector2 *)new MVector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  MVector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (MVector2 *)new MVector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector2__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  MVector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (MVector2 *)new MVector2(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector2__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  MVector2 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (MVector2 *)new MVector2((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector2__SWIG_4(void * jarg1) {
  void * jresult ;
  MVector2 *arg1 = 0 ;
  MVector2 *result = 0 ;
  
  arg1 = (MVector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  result = (MVector2 *)new MVector2((MVector2 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector2__SWIG_5(void * jarg1) {
  void * jresult ;
  MVector3 *arg1 = 0 ;
  MVector2 *result = 0 ;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (MVector2 *)new MVector2((MVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector2_set(void * jarg1, float jarg2, float jarg3) {
  MVector2 *arg1 = (MVector2 *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (MVector2 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector2_loadIdentity(void * jarg1) {
  MVector2 *arg1 = (MVector2 *) 0 ;
  
  arg1 = (MVector2 *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector2_normalize(void * jarg1) {
  MVector2 *arg1 = (MVector2 *) 0 ;
  
  arg1 = (MVector2 *)jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector2_rotate(void * jarg1, float jarg2) {
  MVector2 *arg1 = (MVector2 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector2 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->rotate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector2_getNormalized(void * jarg1) {
  void * jresult ;
  MVector2 *arg1 = (MVector2 *) 0 ;
  MVector2 result;
  
  arg1 = (MVector2 *)jarg1; 
  result = ((MVector2 const *)arg1)->getNormalized();
  jresult = new MVector2((const MVector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector2_getRotated(void * jarg1, float jarg2) {
  void * jresult ;
  MVector2 *arg1 = (MVector2 *) 0 ;
  float arg2 ;
  MVector2 result;
  
  arg1 = (MVector2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((MVector2 const *)arg1)->getRotated(arg2);
  jresult = new MVector2((const MVector2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector2_getAngleBetween(void * jarg1, void * jarg2) {
  float jresult ;
  MVector2 *arg1 = (MVector2 *) 0 ;
  MVector2 *arg2 = 0 ;
  float result;
  
  arg1 = (MVector2 *)jarg1; 
  arg2 = (MVector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  result = (float)(arg1)->getAngleBetween((MVector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector2_getLength(void * jarg1) {
  float jresult ;
  MVector2 *arg1 = (MVector2 *) 0 ;
  float result;
  
  arg1 = (MVector2 *)jarg1; 
  result = (float)((MVector2 const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector2_getSquaredLength(void * jarg1) {
  float jresult ;
  MVector2 *arg1 = (MVector2 *) 0 ;
  float result;
  
  arg1 = (MVector2 *)jarg1; 
  result = (float)((MVector2 const *)arg1)->getSquaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector2_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  MVector2 *arg1 = (MVector2 *) 0 ;
  MVector2 *arg2 = 0 ;
  float result;
  
  arg1 = (MVector2 *)jarg1; 
  arg2 = (MVector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  result = (float)((MVector2 const *)arg1)->dotProduct((MVector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector2_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  MVector2 *arg1 = (MVector2 *) 0 ;
  MVector2 *arg2 = 0 ;
  float arg3 ;
  MVector2 result;
  
  arg1 = (MVector2 *)jarg1; 
  arg2 = (MVector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((MVector2 const *)arg1)->lerp((MVector2 const &)*arg2,arg3);
  jresult = new MVector2((const MVector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MVector2(void * jarg1) {
  MVector2 *arg1 = (MVector2 *) 0 ;
  
  arg1 = (MVector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_x_set(void * jarg1, float jarg2) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector3_x_get(void * jarg1) {
  float jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  float result;
  
  arg1 = (MVector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_y_set(void * jarg1, float jarg2) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector3_y_get(void * jarg1) {
  float jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  float result;
  
  arg1 = (MVector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_z_set(void * jarg1, float jarg2) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector3_z_get(void * jarg1) {
  float jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  float result;
  
  arg1 = (MVector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector3__SWIG_0() {
  void * jresult ;
  MVector3 *result = 0 ;
  
  result = (MVector3 *)new MVector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  MVector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (MVector3 *)new MVector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector3__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  MVector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (MVector3 *)new MVector3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector3__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (MVector3 *)new MVector3((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector3__SWIG_4(void * jarg1) {
  void * jresult ;
  MVector3 *arg1 = 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (MVector3 *)new MVector3((MVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector3__SWIG_5(void * jarg1) {
  void * jresult ;
  MVector4 *arg1 = 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (MVector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return 0;
  } 
  result = (MVector3 *)new MVector3((MVector4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector3__SWIG_6(void * jarg1) {
  void * jresult ;
  MVector2 *arg1 = 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (MVector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector2 const & type is null", 0);
    return 0;
  } 
  result = (MVector3 *)new MVector3((MVector2 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_set(void * jarg1, float jarg2, float jarg3, float jarg4) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_loadIdentity(void * jarg1) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  
  arg1 = (MVector3 *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector3_crossProduct(void * jarg1, void * jarg2) {
  void * jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((MVector3 const *)arg1)->crossProduct((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector3_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  MVector3 *arg2 = 0 ;
  float result;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((MVector3 const *)arg1)->dotProduct((MVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_normalize(void * jarg1) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  
  arg1 = (MVector3 *)jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector3_getNormalized(void * jarg1) {
  void * jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  MVector3 result;
  
  arg1 = (MVector3 *)jarg1; 
  result = ((MVector3 const *)arg1)->getNormalized();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector3_getLength(void * jarg1) {
  float jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  float result;
  
  arg1 = (MVector3 *)jarg1; 
  result = (float)((MVector3 const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector3_getSquaredLength(void * jarg1) {
  float jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  float result;
  
  arg1 = (MVector3 *)jarg1; 
  result = (float)((MVector3 const *)arg1)->getSquaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_rotateX(void * jarg1, double jarg2) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  double arg2 ;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_rotateY(void * jarg1, double jarg2) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  double arg2 ;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_rotateZ(void * jarg1, double jarg2) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  double arg2 ;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->rotateZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector3_rotateAxis(void * jarg1, double jarg2, void * jarg3) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  double arg2 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rotateAxis(arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector3_getRotatedX(void * jarg1, double jarg2) {
  void * jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  double arg2 ;
  MVector3 result;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((MVector3 const *)arg1)->getRotatedX(arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector3_getRotatedY(void * jarg1, double jarg2) {
  void * jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  double arg2 ;
  MVector3 result;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((MVector3 const *)arg1)->getRotatedY(arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector3_getRotatedZ(void * jarg1, double jarg2) {
  void * jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  double arg2 ;
  MVector3 result;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (double)jarg2; 
  result = ((MVector3 const *)arg1)->getRotatedZ(arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector3_getRotatedAxis(void * jarg1, double jarg2, void * jarg3) {
  void * jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  double arg2 ;
  MVector3 *arg3 = 0 ;
  MVector3 result;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((MVector3 const *)arg1)->getRotatedAxis(arg2,(MVector3 const &)*arg3);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector3_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  MVector3 *arg1 = (MVector3 *) 0 ;
  MVector3 *arg2 = 0 ;
  float arg3 ;
  MVector3 result;
  
  arg1 = (MVector3 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((MVector3 const *)arg1)->lerp((MVector3 const &)*arg2,arg3);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MVector3(void * jarg1) {
  MVector3 *arg1 = (MVector3 *) 0 ;
  
  arg1 = (MVector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector4_x_set(void * jarg1, float jarg2) {
  MVector4 *arg1 = (MVector4 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector4_x_get(void * jarg1) {
  float jresult ;
  MVector4 *arg1 = (MVector4 *) 0 ;
  float result;
  
  arg1 = (MVector4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector4_y_set(void * jarg1, float jarg2) {
  MVector4 *arg1 = (MVector4 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector4_y_get(void * jarg1) {
  float jresult ;
  MVector4 *arg1 = (MVector4 *) 0 ;
  float result;
  
  arg1 = (MVector4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector4_z_set(void * jarg1, float jarg2) {
  MVector4 *arg1 = (MVector4 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector4_z_get(void * jarg1) {
  float jresult ;
  MVector4 *arg1 = (MVector4 *) 0 ;
  float result;
  
  arg1 = (MVector4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector4_w_set(void * jarg1, float jarg2) {
  MVector4 *arg1 = (MVector4 *) 0 ;
  float arg2 ;
  
  arg1 = (MVector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector4_w_get(void * jarg1) {
  float jresult ;
  MVector4 *arg1 = (MVector4 *) 0 ;
  float result;
  
  arg1 = (MVector4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector4__SWIG_0() {
  void * jresult ;
  MVector4 *result = 0 ;
  
  result = (MVector4 *)new MVector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  MVector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (MVector4 *)new MVector4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector4__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  MVector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (MVector4 *)new MVector4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector4__SWIG_3(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  MVector4 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (MVector4 *)new MVector4((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector4__SWIG_4(void * jarg1) {
  void * jresult ;
  MVector4 *arg1 = 0 ;
  MVector4 *result = 0 ;
  
  arg1 = (MVector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return 0;
  } 
  result = (MVector4 *)new MVector4((MVector4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector4__SWIG_5(void * jarg1) {
  void * jresult ;
  MVector3 *arg1 = 0 ;
  MVector4 *result = 0 ;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (MVector4 *)new MVector4((MVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MVector4__SWIG_6(void * jarg1) {
  void * jresult ;
  MColor *arg1 = 0 ;
  MVector4 *result = 0 ;
  
  arg1 = (MColor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MColor const & type is null", 0);
    return 0;
  } 
  result = (MVector4 *)new MVector4((MColor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector4_set(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  MVector4 *arg1 = (MVector4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (MVector4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MVector4_loadIdentity(void * jarg1) {
  MVector4 *arg1 = (MVector4 *) 0 ;
  
  arg1 = (MVector4 *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT float SWIGSTDCALL CSharp_MVector4_dotProduct(void * jarg1, void * jarg2) {
  float jresult ;
  MVector4 *arg1 = (MVector4 *) 0 ;
  MVector4 *arg2 = 0 ;
  float result;
  
  arg1 = (MVector4 *)jarg1; 
  arg2 = (MVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return 0;
  } 
  result = (float)(arg1)->dotProduct((MVector4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MVector4_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  MVector4 *arg1 = (MVector4 *) 0 ;
  MVector4 *arg2 = 0 ;
  float arg3 ;
  MVector4 result;
  
  arg1 = (MVector4 *)jarg1; 
  arg2 = (MVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((MVector4 const *)arg1)->lerp((MVector4 const &)*arg2,arg3);
  jresult = new MVector4((const MVector4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MVector4(void * jarg1) {
  MVector4 *arg1 = (MVector4 *) 0 ;
  
  arg1 = (MVector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MColor_r_set(void * jarg1, unsigned char jarg2) {
  MColor *arg1 = (MColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (MColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MColor_r_get(void * jarg1) {
  unsigned char jresult ;
  MColor *arg1 = (MColor *) 0 ;
  unsigned char result;
  
  arg1 = (MColor *)jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MColor_g_set(void * jarg1, unsigned char jarg2) {
  MColor *arg1 = (MColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (MColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MColor_g_get(void * jarg1) {
  unsigned char jresult ;
  MColor *arg1 = (MColor *) 0 ;
  unsigned char result;
  
  arg1 = (MColor *)jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MColor_b_set(void * jarg1, unsigned char jarg2) {
  MColor *arg1 = (MColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (MColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MColor_b_get(void * jarg1) {
  unsigned char jresult ;
  MColor *arg1 = (MColor *) 0 ;
  unsigned char result;
  
  arg1 = (MColor *)jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MColor_a_set(void * jarg1, unsigned char jarg2) {
  MColor *arg1 = (MColor *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (MColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MColor_a_get(void * jarg1) {
  unsigned char jresult ;
  MColor *arg1 = (MColor *) 0 ;
  unsigned char result;
  
  arg1 = (MColor *)jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MColor__SWIG_0() {
  void * jresult ;
  MColor *result = 0 ;
  
  result = (MColor *)new MColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MColor__SWIG_1(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  void * jresult ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  MColor *result = 0 ;
  
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (MColor *)new MColor(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MColor__SWIG_2(void * jarg1) {
  void * jresult ;
  MColor *arg1 = 0 ;
  MColor *result = 0 ;
  
  arg1 = (MColor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MColor const & type is null", 0);
    return 0;
  } 
  result = (MColor *)new MColor((MColor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MColor__SWIG_3(void * jarg1) {
  void * jresult ;
  MVector3 *arg1 = 0 ;
  MColor *result = 0 ;
  
  arg1 = (MVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (MColor *)new MColor((MVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MColor__SWIG_4(void * jarg1) {
  void * jresult ;
  MVector4 *arg1 = 0 ;
  MColor *result = 0 ;
  
  arg1 = (MVector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return 0;
  } 
  result = (MColor *)new MColor((MVector4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MColor(void * jarg1) {
  MColor *arg1 = (MColor *) 0 ;
  
  arg1 = (MColor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MColor_set(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  MColor *arg1 = (MColor *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  
  arg1 = (MColor *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  arg5 = (unsigned char)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_entries_set(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  float *arg2 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->entries;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_entries_get(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  float *result = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  result = (float *)(float *) ((arg1)->entries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MMatrix4x4__SWIG_0() {
  void * jresult ;
  MMatrix4x4 *result = 0 ;
  
  result = (MMatrix4x4 *)new MMatrix4x4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MMatrix4x4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  MMatrix4x4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = (float)jarg14; 
  arg15 = (float)jarg15; 
  arg16 = (float)jarg16; 
  result = (MMatrix4x4 *)new MMatrix4x4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MMatrix4x4__SWIG_2(void * jarg1) {
  void * jresult ;
  float *arg1 = (float *) 0 ;
  MMatrix4x4 *result = 0 ;
  
  arg1 = (float *)jarg1; 
  result = (MMatrix4x4 *)new MMatrix4x4((float const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MMatrix4x4__SWIG_3(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = 0 ;
  MMatrix4x4 *result = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MMatrix4x4 const & type is null", 0);
    return 0;
  } 
  result = (MMatrix4x4 *)new MMatrix4x4((MMatrix4x4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MMatrix4x4(void * jarg1) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_loadIdentity(void * jarg1) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_loadZero(void * jarg1) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  (arg1)->loadZero();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_invert(void * jarg1) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  (arg1)->invert();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_transpose(void * jarg1) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  (arg1)->transpose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_affineInvert(void * jarg1) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  (arg1)->affineInvert();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_invertTranspose(void * jarg1) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  (arg1)->invertTranspose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_affineInvertTranspose(void * jarg1) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  (arg1)->affineInvertTranspose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_scale(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->scale((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_rotate(void * jarg1, void * jarg2, float jarg3) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->rotate((MVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_translate(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 arg2 ;
  MVector3 const *argp2 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  argp2 = (MVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3 const", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->translate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setEntry(void * jarg1, int jarg2, float jarg3) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setEntry(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setScale(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setScale((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setUniformScale(void * jarg1, float jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  float arg2 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setUniformScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setTranslation(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setTranslation((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setTranslationPart(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setTranslationPart((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setRotationAxis(void * jarg1, float jarg2, void * jarg3) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  float arg2 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setRotationAxis(arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setRotationX(void * jarg1, float jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  float arg2 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRotationX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setRotationY(void * jarg1, float jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  float arg2 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRotationY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setRotationZ(void * jarg1, float jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  float arg2 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRotationZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setRotationEuler(void * jarg1, float jarg2, float jarg3, float jarg4) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setRotationEuler(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setRotationPartEuler__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setRotationPartEuler(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_setRotationPartEuler__SWIG_1(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setRotationPartEuler((MVector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_MMatrix4x4_getEntry(void * jarg1, int jarg2) {
  float jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((MMatrix4x4 const *)arg1)->getEntry(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getRotatedVector3(void * jarg1, void * jarg2) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((MMatrix4x4 const *)arg1)->getRotatedVector3((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getInverseRotatedVector3(void * jarg1, void * jarg2) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((MMatrix4x4 const *)arg1)->getInverseRotatedVector3((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getTranslatedVector3(void * jarg1, void * jarg2) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((MMatrix4x4 const *)arg1)->getTranslatedVector3((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getInversetranslatedVector3(void * jarg1, void * jarg2) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((MMatrix4x4 const *)arg1)->getInversetranslatedVector3((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getTranslationPart(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  result = ((MMatrix4x4 const *)arg1)->getTranslationPart();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getEulerAngles(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  result = ((MMatrix4x4 const *)arg1)->getEulerAngles();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getScale(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  result = ((MMatrix4x4 const *)arg1)->getScale();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getRow(void * jarg1, int jarg2) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  int arg2 ;
  MVector4 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MMatrix4x4 const *)arg1)->getRow(arg2);
  jresult = new MVector4((const MVector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getColumn(void * jarg1, int jarg2) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  int arg2 ;
  MVector4 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((MMatrix4x4 const *)arg1)->getColumn(arg2);
  jresult = new MVector4((const MVector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getInverse(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MMatrix4x4 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  result = ((MMatrix4x4 const *)arg1)->getInverse();
  jresult = new MMatrix4x4((const MMatrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getTranspose(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MMatrix4x4 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  result = ((MMatrix4x4 const *)arg1)->getTranspose();
  jresult = new MMatrix4x4((const MMatrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getInversetranspose(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MMatrix4x4 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  result = ((MMatrix4x4 const *)arg1)->getInversetranspose();
  jresult = new MMatrix4x4((const MMatrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getAffineInverse(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MMatrix4x4 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  result = ((MMatrix4x4 const *)arg1)->getAffineInverse();
  jresult = new MMatrix4x4((const MMatrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MMatrix4x4_getAffineInverseTranspose(void * jarg1) {
  void * jresult ;
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MMatrix4x4 result;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  result = ((MMatrix4x4 const *)arg1)->getAffineInverseTranspose();
  jresult = new MMatrix4x4((const MMatrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_rotateVector3(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 & type is null", 0);
    return ;
  } 
  ((MMatrix4x4 const *)arg1)->rotateVector3(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_inverseRotateVector3(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 & type is null", 0);
    return ;
  } 
  ((MMatrix4x4 const *)arg1)->inverseRotateVector3(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_translateVector3(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 & type is null", 0);
    return ;
  } 
  ((MMatrix4x4 const *)arg1)->translateVector3(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MMatrix4x4_inversetranslateVector3(void * jarg1, void * jarg2) {
  MMatrix4x4 *arg1 = (MMatrix4x4 *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MMatrix4x4 *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 & type is null", 0);
    return ;
  } 
  ((MMatrix4x4 const *)arg1)->inversetranslateVector3(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQuaternion_values_set(void * jarg1, void * jarg2) {
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  float *arg2 ;
  
  arg1 = (MQuaternion *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->values;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQuaternion_values_get(void * jarg1) {
  void * jresult ;
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  float *result = 0 ;
  
  arg1 = (MQuaternion *)jarg1; 
  result = (float *)(float *) ((arg1)->values);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQuaternion__SWIG_0() {
  void * jresult ;
  MQuaternion *result = 0 ;
  
  result = (MQuaternion *)new MQuaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQuaternion__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  MQuaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (MQuaternion *)new MQuaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQuaternion__SWIG_2(float jarg1, void * jarg2) {
  void * jresult ;
  float arg1 ;
  MVector3 *arg2 = 0 ;
  MQuaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (MQuaternion *)new MQuaternion(arg1,(MVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQuaternion__SWIG_3(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  MQuaternion *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (MQuaternion *)new MQuaternion(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQuaternion__SWIG_4(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  MQuaternion *arg1 = 0 ;
  MQuaternion arg2 ;
  float arg3 ;
  MQuaternion *argp2 ;
  MQuaternion *result = 0 ;
  
  arg1 = (MQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQuaternion const & type is null", 0);
    return 0;
  } 
  argp2 = (MQuaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MQuaternion", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  result = (MQuaternion *)new MQuaternion((MQuaternion const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQuaternion_normalize(void * jarg1) {
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  
  arg1 = (MQuaternion *)jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQuaternion_loadIdentity(void * jarg1) {
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  
  arg1 = (MQuaternion *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQuaternion_setFromAngles(void * jarg1, float jarg2, float jarg3, float jarg4) {
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (MQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setFromAngles(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQuaternion_slerp(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  MQuaternion *arg2 = 0 ;
  MQuaternion *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (MQuaternion *)jarg1; 
  arg2 = (MQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQuaternion const & type is null", 0);
    return ;
  } 
  arg3 = (MQuaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQuaternion const & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  (arg1)->slerp((MQuaternion const &)*arg2,(MQuaternion const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQuaternion_invert(void * jarg1) {
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  
  arg1 = (MQuaternion *)jarg1; 
  (arg1)->invert();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQuaternion_setFromAngleAxis(void * jarg1, float jarg2, void * jarg3) {
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  float arg2 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MQuaternion *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setFromAngleAxis(arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQuaternion_setFromVectors(void * jarg1, void * jarg2, void * jarg3) {
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MQuaternion *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setFromVectors((MVector3 const &)*arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQuaternion_getEulerAngles(void * jarg1) {
  void * jresult ;
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  MVector3 result;
  
  arg1 = (MQuaternion *)jarg1; 
  result = ((MQuaternion const *)arg1)->getEulerAngles();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MQuaternion_getAngle(void * jarg1) {
  float jresult ;
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  float result;
  
  arg1 = (MQuaternion *)jarg1; 
  result = (float)((MQuaternion const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQuaternion_getAxis(void * jarg1) {
  void * jresult ;
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  MVector3 result;
  
  arg1 = (MQuaternion *)jarg1; 
  result = ((MQuaternion const *)arg1)->getAxis();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQuaternion(void * jarg1) {
  MQuaternion *arg1 = (MQuaternion *) 0 ;
  
  arg1 = (MQuaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MSystemContext(void * jarg1) {
  MSystemContext *arg1 = (MSystemContext *) 0 ;
  
  arg1 = (MSystemContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSystemContext_getScreenSize(void * jarg1, void * jarg2, void * jarg3) {
  MSystemContext *arg1 = (MSystemContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  arg1 = (MSystemContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  (arg1)->getScreenSize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSystemContext_setCursorPosition(void * jarg1, int jarg2, int jarg3) {
  MSystemContext *arg1 = (MSystemContext *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (MSystemContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setCursorPosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSystemContext_hideCursor(void * jarg1) {
  MSystemContext *arg1 = (MSystemContext *) 0 ;
  
  arg1 = (MSystemContext *)jarg1; 
  (arg1)->hideCursor();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSystemContext_showCursor(void * jarg1) {
  MSystemContext *arg1 = (MSystemContext *) 0 ;
  
  arg1 = (MSystemContext *)jarg1; 
  (arg1)->showCursor();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MSystemContext_getWorkingDirectory(void * jarg1) {
  char * jresult ;
  MSystemContext *arg1 = (MSystemContext *) 0 ;
  char *result = 0 ;
  
  arg1 = (MSystemContext *)jarg1; 
  result = (char *)(arg1)->getWorkingDirectory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MSystemContext_getSystemTick(void * jarg1) {
  unsigned long jresult ;
  MSystemContext *arg1 = (MSystemContext *) 0 ;
  unsigned long result;
  
  arg1 = (MSystemContext *)jarg1; 
  result = (unsigned long)(arg1)->getSystemTick();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MInputContext(void * jarg1) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  
  arg1 = (MInputContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_createKey(void * jarg1, char * jarg2) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->createKey((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_createAxis__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->createAxis((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_createAxis__SWIG_1(void * jarg1, char * jarg2) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->createAxis((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_createProperty(void * jarg1, char * jarg2) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->createProperty((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_downKey(void * jarg1, char * jarg2) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->downKey((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_upKey(void * jarg1, char * jarg2) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->upKey((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_setAxis(void * jarg1, char * jarg2, float jarg3) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setAxis((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_setProperty(void * jarg1, char * jarg2, int jarg3) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setProperty((char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MInputContext_isKeyPressed(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->isKeyPressed((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MInputContext_onKeyDown(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->onKeyDown((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MInputContext_onKeyUp(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->onKeyUp((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MInputContext_getAxis(void * jarg1, char * jarg2) {
  float jresult ;
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (float)(arg1)->getAxis((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MInputContext_getProperty(void * jarg1, char * jarg2) {
  int jresult ;
  MInputContext *arg1 = (MInputContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->getProperty((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_beginTouch(void * jarg1, int jarg2, void * jarg3) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  int arg2 ;
  MVector2 arg3 ;
  MVector2 *argp3 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (MVector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector2", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->beginTouch(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_updateTouch(void * jarg1, int jarg2, void * jarg3) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  int arg2 ;
  MVector2 arg3 ;
  MVector2 *argp3 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (MVector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector2", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->updateTouch(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_endTouch(void * jarg1, int jarg2, void * jarg3) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  int arg2 ;
  MVector2 arg3 ;
  MVector2 *argp3 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (MVector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector2", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->endTouch(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_cancelTouch(void * jarg1, int jarg2, void * jarg3) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  int arg2 ;
  MVector2 arg3 ;
  MVector2 *argp3 ;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (MVector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector2", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->cancelTouch(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MInputContext_getTouchPosition(void * jarg1, int jarg2) {
  void * jresult ;
  MInputContext *arg1 = (MInputContext *) 0 ;
  int arg2 ;
  MVector2 result;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getTouchPosition(arg2);
  jresult = new MVector2((const MVector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MInputContext_getLastTouchPosition(void * jarg1, int jarg2) {
  void * jresult ;
  MInputContext *arg1 = (MInputContext *) 0 ;
  int arg2 ;
  MVector2 result;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getLastTouchPosition(arg2);
  jresult = new MVector2((const MVector2 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MInputContext_getTouchPhase(void * jarg1, int jarg2) {
  int jresult ;
  MInputContext *arg1 = (MInputContext *) 0 ;
  int arg2 ;
  M_TOUCH_PHASE result;
  
  arg1 = (MInputContext *)jarg1; 
  arg2 = (int)jarg2; 
  result = (M_TOUCH_PHASE)(arg1)->getTouchPhase(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MInputContext_flush(void * jarg1) {
  MInputContext *arg1 = (MInputContext *) 0 ;
  
  arg1 = (MInputContext *)jarg1; 
  (arg1)->flush();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MRenderingContext(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MRenderingContext_getRendererVersion(void * jarg1) {
  char * jresult ;
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  char *result = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  result = (char *)(arg1)->getRendererVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setOrthoView(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->setOrthoView(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setPerspectiveView(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->setPerspectiveView(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setViewport(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->setViewport(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_clear(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setClearColor(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector4 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setClearColor((MVector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableTexture(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableTexture();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableTexture(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableTexture();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setTextureGenMode(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_TEX_GEN_MODES arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_TEX_GEN_MODES)jarg2; 
  (arg1)->setTextureGenMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setTextureFilterMode(void * jarg1, int jarg2, int jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_TEX_FILTER_MODES arg2 ;
  M_TEX_FILTER_MODES arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_TEX_FILTER_MODES)jarg2; 
  arg3 = (M_TEX_FILTER_MODES)jarg3; 
  (arg1)->setTextureFilterMode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setTextureUWrapMode(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_WRAP_MODES arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_WRAP_MODES)jarg2; 
  (arg1)->setTextureUWrapMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setTextureVWrapMode(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_WRAP_MODES arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_WRAP_MODES)jarg2; 
  (arg1)->setTextureVWrapMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setTextureCombineMode(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_TEX_COMBINE_MODES arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_TEX_COMBINE_MODES)jarg2; 
  (arg1)->setTextureCombineMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_bindTexture__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->bindTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_bindTexture__SWIG_1(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->bindTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_createTexture(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_deleteTexture(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendTextureImage(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MImage *arg2 = (MImage *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MImage *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->sendTextureImage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_texImage(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, void * jarg7) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  M_TYPES arg5 ;
  M_TEX_MODES arg6 ;
  void *arg7 = (void *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (M_TYPES)jarg5; 
  arg6 = (M_TEX_MODES)jarg6; 
  arg7 = (void *)jarg7; 
  (arg1)->texImage(arg2,arg3,arg4,arg5,arg6,(void const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_texSubImage(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, int jarg8, void * jarg9) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  M_TYPES arg7 ;
  M_TEX_MODES arg8 ;
  void *arg9 = (void *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (M_TYPES)jarg7; 
  arg8 = (M_TEX_MODES)jarg8; 
  arg9 = (void *)jarg9; 
  (arg1)->texSubImage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(void const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_generateMipMap(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->generateMipMap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getTexImage(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MImage *arg3 = (MImage *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MImage *)jarg3; 
  (arg1)->getTexImage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_createFrameBuffer(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createFrameBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_deleteFrameBuffer(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteFrameBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_bindFrameBuffer(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->bindFrameBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getCurrentFrameBuffer(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->getCurrentFrameBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_attachFrameBufferTexture(void * jarg1, int jarg2, unsigned int jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_FRAME_BUFFER_ATTACHMENT arg2 ;
  unsigned int arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_FRAME_BUFFER_ATTACHMENT)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->attachFrameBufferTexture(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_attachFrameBufferRB(void * jarg1, int jarg2, unsigned int jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_FRAME_BUFFER_ATTACHMENT arg2 ;
  unsigned int arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_FRAME_BUFFER_ATTACHMENT)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->attachFrameBufferRB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setDrawingBuffers(void * jarg1, void * jarg2, unsigned int jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_FRAME_BUFFER_ATTACHMENT *arg2 = (M_FRAME_BUFFER_ATTACHMENT *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_FRAME_BUFFER_ATTACHMENT *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->setDrawingBuffers(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_createRenderBuffer(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createRenderBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_deleteRenderBuffer(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteRenderBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_bindRenderBuffer(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->bindRenderBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setRenderBuffer(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_RENDER_BUFFER_MODES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_RENDER_BUFFER_MODES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->setRenderBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_createVertexShader(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createVertexShader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_createPixelShader(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createPixelShader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_deleteShader(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteShader(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MRenderingContext_sendShaderSource(void * jarg1, unsigned int jarg2, char * jarg3) {
  unsigned int jresult ;
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->sendShaderSource(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_bindFX(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->bindFX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_createFX(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->createFX(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_updateFX(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->updateFX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_deleteFX(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteFX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformInt__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformInt(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformInt__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  (arg1)->sendUniformInt(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformFloat__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformFloat(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformFloat__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->sendUniformFloat(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformVec2__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformVec2(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformVec2__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->sendUniformVec2(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformVec3__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformVec3(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformVec3__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->sendUniformVec3(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformVec4__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformVec4(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformVec4__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->sendUniformVec4(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformMatrix__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  MMatrix4x4 *arg4 = (MMatrix4x4 *) 0 ;
  int arg5 ;
  bool arg6 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (MMatrix4x4 *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformMatrix__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4, int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  MMatrix4x4 *arg4 = (MMatrix4x4 *) 0 ;
  int arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (MMatrix4x4 *)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_sendUniformMatrix__SWIG_2(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  MMatrix4x4 *arg4 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (MMatrix4x4 *)jarg4; 
  (arg1)->sendUniformMatrix(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getAttribLocation(void * jarg1, unsigned int jarg2, char * jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int *)jarg4; 
  (arg1)->getAttribLocation(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_createVBO(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createVBO(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_deleteVBO(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteVBO(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_bindVBO(void * jarg1, int jarg2, unsigned int jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_VBO_TYPES arg2 ;
  unsigned int arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_VBO_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->bindVBO(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setVBO(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_VBO_TYPES arg2 ;
  void *arg3 = (void *) 0 ;
  unsigned int arg4 ;
  M_VBO_MODES arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_VBO_TYPES)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (M_VBO_MODES)jarg5; 
  (arg1)->setVBO(arg2,(void const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setVBOSubData(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_VBO_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_VBO_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->setVBOSubData(arg2,arg3,(void const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableVertexArray(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableVertexArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableColorArray(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableColorArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableNormalArray(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableNormalArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableTexCoordArray(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableTexCoordArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableAttribArray(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->enableAttribArray(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableVertexArray(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableVertexArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableColorArray(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableColorArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableNormalArray(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableNormalArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableTexCoordArray(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableTexCoordArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableAttribArray(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->disableAttribArray(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setVertexPointer(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->setVertexPointer(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setColorPointer(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->setColorPointer(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setNormalPointer(void * jarg1, int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_TYPES arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_TYPES)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->setNormalPointer(arg2,(void const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setTexCoordPointer(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_TYPES arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->setTexCoordPointer(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setAttribPointer__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  M_TYPES arg3 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  bool arg6 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (M_TYPES)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->setAttribPointer(arg2,arg3,arg4,(void const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setAttribPointer__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4, void * jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  M_TYPES arg3 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (M_TYPES)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void *)jarg5; 
  (arg1)->setAttribPointer(arg2,arg3,arg4,(void const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_drawArray(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_PRIMITIVE_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->drawArray(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_drawElement(void * jarg1, int jarg2, unsigned int jarg3, int jarg4, void * jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_PRIMITIVE_TYPES arg2 ;
  unsigned int arg3 ;
  M_TYPES arg4 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_PRIMITIVE_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (M_TYPES)jarg4; 
  arg5 = (void *)jarg5; 
  (arg1)->drawElement(arg2,arg3,arg4,(void const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableLineAntialiasing(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableLineAntialiasing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableLineAntialiasing(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableLineAntialiasing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setMaterialDiffuse(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector4 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setMaterialDiffuse((MVector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setMaterialSpecular(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector4 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setMaterialSpecular((MVector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setMaterialAmbient(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector4 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setMaterialAmbient((MVector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setMaterialEmit(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector4 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setMaterialEmit((MVector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setMaterialShininess(void * jarg1, float jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  float arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMaterialShininess(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableScissorTest(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableScissorTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableScissorTest(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableScissorTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setScissor(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->setScissor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setColor(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MColor *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MColor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MColor const & type is null", 0);
    return ;
  } 
  (arg1)->setColor((MColor const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setColor3(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setColor3((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setColor4(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector4 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setColor4((MVector4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setColorMask(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setColorMask(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setDepthMask(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  bool arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDepthMask(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setAlphaTest(void * jarg1, float jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  float arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAlphaTest(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableDepthTest(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableDepthTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableDepthTest(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableDepthTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setDepthMode(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_DEPTH_MODES arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_DEPTH_MODES)jarg2; 
  (arg1)->setDepthMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enablePolygonOffset(void * jarg1, float jarg2, float jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->enablePolygonOffset(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disablePolygonOffset(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disablePolygonOffset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableStencilTest(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableStencilTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableStencilTest(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableStencilTest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setStencilFunc__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_STENCIL_FUNCS arg2 ;
  int arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_STENCIL_FUNCS)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setStencilFunc(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setStencilFunc__SWIG_1(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_STENCIL_FUNCS arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_STENCIL_FUNCS)jarg2; 
  (arg1)->setStencilFunc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setStencilOp(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_STENCIL_OPS arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_STENCIL_OPS)jarg2; 
  (arg1)->setStencilOp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableCullFace(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableCullFace();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableCullFace(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableCullFace();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setCullMode(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_CULL_MODES arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_CULL_MODES)jarg2; 
  (arg1)->setCullMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_createQuery(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createQuery(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_deleteQuery(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteQuery(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_beginQuery(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->beginQuery(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_endQuery(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->endQuery();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getQueryResult(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  (arg1)->getQueryResult(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_loadIdentity(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setMatrixMode(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_MATRIX_MODES arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_MATRIX_MODES)jarg2; 
  (arg1)->setMatrixMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_pushMatrix(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->pushMatrix();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_popMatrix(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->popMatrix();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_multMatrix(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MMatrix4x4 *arg2 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MMatrix4x4 *)jarg2; 
  (arg1)->multMatrix((MMatrix4x4 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_translate(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->translate((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_rotate(void * jarg1, void * jarg2, float jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->rotate((MVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_scale(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->scale((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getViewport(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (int *)jarg2; 
  (arg1)->getViewport(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getModelViewMatrix(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MMatrix4x4 *arg2 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MMatrix4x4 *)jarg2; 
  (arg1)->getModelViewMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getProjectionMatrix(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MMatrix4x4 *arg2 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MMatrix4x4 *)jarg2; 
  (arg1)->getProjectionMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getTextureMatrix(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MMatrix4x4 *arg2 = (MMatrix4x4 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MMatrix4x4 *)jarg2; 
  (arg1)->getTextureMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableFog(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableFog();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableFog(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableFog();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setFogColor(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setFogColor((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setFogDistance(void * jarg1, float jarg2, float jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setFogDistance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getFogColor(void * jarg1, void * jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  MVector3 *arg2 = (MVector3 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (MVector3 *)jarg2; 
  (arg1)->getFogColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getFogDistance(void * jarg1, void * jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->getFogDistance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableLighting(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableLighting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableLighting(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableLighting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableLight(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->enableLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableLight(void * jarg1, unsigned int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->disableLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setLightPosition(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector4 *arg3 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightPosition(arg2,(MVector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setLightDiffuse(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector4 *arg3 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightDiffuse(arg2,(MVector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setLightSpecular(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector4 *arg3 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightSpecular(arg2,(MVector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setLightAmbient(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector4 *arg3 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightAmbient(arg2,(MVector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setLightAttenuation(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->setLightAttenuation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setLightSpotDirection(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLightSpotDirection(arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setLightSpotAngle(void * jarg1, unsigned int jarg2, float jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setLightSpotAngle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setLightSpotExponent(void * jarg1, unsigned int jarg2, float jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setLightSpotExponent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getLightPosition(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector4 *arg3 = (MVector4 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector4 *)jarg3; 
  (arg1)->getLightPosition(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getLightDiffuse(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector4 *arg3 = (MVector4 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector4 *)jarg3; 
  (arg1)->getLightDiffuse(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getLightSpecular(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector4 *arg3 = (MVector4 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector4 *)jarg3; 
  (arg1)->getLightSpecular(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getLightAmbient(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector4 *arg3 = (MVector4 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector4 *)jarg3; 
  (arg1)->getLightAmbient(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getLightAttenuation(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float *)jarg5; 
  (arg1)->getLightAttenuation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getLightSpotDirection(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = (MVector3 *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3; 
  (arg1)->getLightSpotDirection(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getLightSpotAngle(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->getLightSpotAngle(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_getLightSpotExponent(void * jarg1, unsigned int jarg2, void * jarg3) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float *)jarg3; 
  (arg1)->getLightSpotExponent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_enableBlending(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->enableBlending();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_disableBlending(void * jarg1) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  (arg1)->disableBlending();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setBlendingMode(void * jarg1, int jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  M_BLENDING_MODES arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (M_BLENDING_MODES)jarg2; 
  (arg1)->setBlendingMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MRenderingContext_setPointSize(void * jarg1, float jarg2) {
  MRenderingContext *arg1 = (MRenderingContext *) 0 ;
  float arg2 ;
  
  arg1 = (MRenderingContext *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setPointSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MSoundContext(void * jarg1) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  
  arg1 = (MSoundContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_initContext(void * jarg1) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  
  arg1 = (MSoundContext *)jarg1; 
  (arg1)->initContext();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_createBuffer(void * jarg1, void * jarg2) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_deleteBuffer(void * jarg1, void * jarg2) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_sendBufferSound(void * jarg1, unsigned int jarg2, void * jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  MSound *arg3 = (MSound *) 0 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MSound *)jarg3; 
  (arg1)->sendBufferSound(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_sendBufferData(void * jarg1, unsigned int jarg2, int jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  M_SOUND_FORMAT arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (M_SOUND_FORMAT)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  (arg1)->sendBufferData(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_MSoundContext_getBufferDuration(void * jarg1, unsigned int jarg2) {
  float jresult ;
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (float)(arg1)->getBufferDuration(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_createSource(void * jarg1, void * jarg2, unsigned int jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->createSource(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_deleteSource(void * jarg1, void * jarg2) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteSource(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_enableSourceLoop(void * jarg1, unsigned int jarg2) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->enableSourceLoop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_disableSourceLoop(void * jarg1, unsigned int jarg2) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->disableSourceLoop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_setSourceRelative(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setSourceRelative(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_setSourceBufferId(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->setSourceBufferId(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_setSourcePosition(void * jarg1, unsigned int jarg2, void * jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setSourcePosition(arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_setSourceRadius(void * jarg1, unsigned int jarg2, float jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourceRadius(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_setSourcePitch(void * jarg1, unsigned int jarg2, float jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourcePitch(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_setSourceGain(void * jarg1, unsigned int jarg2, float jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourceGain(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_setSourceRolloff(void * jarg1, unsigned int jarg2, float jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourceRolloff(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_setSourceOffset(void * jarg1, unsigned int jarg2, float jarg3) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setSourceOffset(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_MSoundContext_getSourceOffset(void * jarg1, unsigned int jarg2) {
  float jresult ;
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (float)(arg1)->getSourceOffset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_playSource(void * jarg1, unsigned int jarg2) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->playSource(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_pauseSource(void * jarg1, unsigned int jarg2) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->pauseSource(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_stopSource(void * jarg1, unsigned int jarg2) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->stopSource(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MSoundContext_isSourcePaused(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->isSourcePaused(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MSoundContext_isSourcePlaying(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->isSourcePlaying(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MSoundContext_getSourceTimePos(void * jarg1, unsigned int jarg2) {
  float jresult ;
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (float)(arg1)->getSourceTimePos(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_queueSourceBuffer(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->queueSourceBuffer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_unqueueSourceBuffer(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->unqueueSourceBuffer(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MSoundContext_getSourceBuffersQueued(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->getSourceBuffersQueued(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MSoundContext_getSourceBuffersProcessed(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->getSourceBuffersProcessed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSoundContext_updateListenerPosition(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  MSoundContext *arg1 = (MSoundContext *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  MVector3 *arg4 = 0 ;
  
  arg1 = (MSoundContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->updateListenerPosition((MVector3 const &)*arg2,(MVector3 const &)*arg3,(MVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MPhysicsContext(void * jarg1) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_init(void * jarg1, void * jarg2, void * jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->init((MVector3 const &)*arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_clear(void * jarg1) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setSimulationQuality(void * jarg1, unsigned int jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setSimulationQuality(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_updateSimulation(void * jarg1) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  (arg1)->updateSimulation();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setWorldGravity(void * jarg1, void * jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setWorldGravity((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createGhost(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  MVector3 *arg4 = 0 ;
  MQuaternion *arg5 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (MQuaternion *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->createGhost(arg2,arg3,(MVector3 const &)*arg4,(MQuaternion const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createRigidBody(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, float jarg6) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  MVector3 *arg4 = 0 ;
  MQuaternion *arg5 = 0 ;
  float arg6 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (MQuaternion *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQuaternion const & type is null", 0);
    return ;
  } 
  arg6 = (float)jarg6; 
  (arg1)->createRigidBody(arg2,arg3,(MVector3 const &)*arg4,(MQuaternion const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_activateObject(void * jarg1, unsigned int jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->activateObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_deactivateObject(void * jarg1, unsigned int jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->deactivateObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_deleteObject(void * jarg1, void * jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_enableObjectKinematic(void * jarg1, unsigned int jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->enableObjectKinematic(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_disableObjectKinematic(void * jarg1, unsigned int jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->disableObjectKinematic(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setObjectShape(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->setObjectShape(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setObjectMass(void * jarg1, unsigned int jarg2, float jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setObjectMass(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setObjectRestitution(void * jarg1, unsigned int jarg2, float jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setObjectRestitution(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setObjectFriction(void * jarg1, unsigned int jarg2, float jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setObjectFriction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setObjectLinearFactor(void * jarg1, unsigned int jarg2, void * jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setObjectLinearFactor(arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setObjectAngularFactor(void * jarg1, unsigned int jarg2, float jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setObjectAngularFactor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setObjectDamping(void * jarg1, unsigned int jarg2, float jarg3, float jarg4) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->setObjectDamping(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setObjectTransform(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = 0 ;
  MQuaternion *arg4 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (MQuaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setObjectTransform(arg2,(MVector3 const &)*arg3,(MQuaternion const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_getObjectTransform(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = (MVector3 *) 0 ;
  MQuaternion *arg4 = (MQuaternion *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3; 
  arg4 = (MQuaternion *)jarg4; 
  (arg1)->getObjectTransform(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setObjectUserPointer(void * jarg1, unsigned int jarg2, void * jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->setObjectUserPointer(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MPhysicsContext_getObjectUserPointer(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (void *)(arg1)->getObjectUserPointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_addCentralForce(void * jarg1, unsigned int jarg2, void * jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addCentralForce(arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_getCentralForce(void * jarg1, unsigned int jarg2, void * jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = (MVector3 *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3; 
  (arg1)->getCentralForce(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_addTorque(void * jarg1, unsigned int jarg2, void * jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addTorque(arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_getTorque(void * jarg1, unsigned int jarg2, void * jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = (MVector3 *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3; 
  (arg1)->getTorque(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_clearForces(void * jarg1, unsigned int jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->clearForces(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MPhysicsContext_isObjectInCollision__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  int result;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (int)(arg1)->isObjectInCollision(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MPhysicsContext_isObjectInCollision__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  int result;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (int)(arg1)->isObjectInCollision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MPhysicsContext_isObjectInCollision__SWIG_2(void * jarg1, unsigned int jarg2) {
  int jresult ;
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->isObjectInCollision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MPhysicsContext_isObjectsCollision(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->isObjectsCollision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MPhysicsContext_isRayHit__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  MVector3 *arg5 = (MVector3 *) 0 ;
  MVector3 *arg6 = (MVector3 *) 0 ;
  bool result;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int *)jarg4; 
  arg5 = (MVector3 *)jarg5; 
  arg6 = (MVector3 *)jarg6; 
  result = (bool)(arg1)->isRayHit((MVector3 const &)*arg2,(MVector3 const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MPhysicsContext_isRayHit__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  MVector3 *arg5 = (MVector3 *) 0 ;
  bool result;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int *)jarg4; 
  arg5 = (MVector3 *)jarg5; 
  result = (bool)(arg1)->isRayHit((MVector3 const &)*arg2,(MVector3 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MPhysicsContext_isRayHit__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int *)jarg4; 
  result = (bool)(arg1)->isRayHit((MVector3 const &)*arg2,(MVector3 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MPhysicsContext_isRayHit__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->isRayHit((MVector3 const &)*arg2,(MVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createMultiShape(void * jarg1, void * jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->createMultiShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createBoxShape(void * jarg1, void * jarg2, void * jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  MVector3 *arg3 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->createBoxShape(arg2,(MVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createSphereShape(void * jarg1, void * jarg2, float jarg3) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->createSphereShape(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createConeShape(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->createConeShape(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createCapsuleShape(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->createCapsuleShape(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createCylinderShape(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->createCylinderShape(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createConvexHullShape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  MVector3 *arg3 = (MVector3 *) 0 ;
  unsigned int arg4 ;
  MVector3 arg5 ;
  MVector3 const *argp5 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (MVector3 *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  argp5 = (MVector3 *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3 const", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->createConvexHullShape(arg2,(MVector3 const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createConvexHullShape__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  MVector3 *arg3 = (MVector3 *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (MVector3 *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->createConvexHullShape(arg2,(MVector3 const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createTriangleMeshShape__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, int jarg7, void * jarg8) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  MVector3 *arg3 = (MVector3 *) 0 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  unsigned int arg6 ;
  M_TYPES arg7 ;
  MVector3 arg8 ;
  MVector3 const *argp8 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (MVector3 *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (M_TYPES)jarg7; 
  argp8 = (MVector3 *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3 const", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->createTriangleMeshShape(arg2,(MVector3 const *)arg3,arg4,(void const *)arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createTriangleMeshShape__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, int jarg7) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  MVector3 *arg3 = (MVector3 *) 0 ;
  unsigned int arg4 ;
  void *arg5 = (void *) 0 ;
  unsigned int arg6 ;
  M_TYPES arg7 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (MVector3 *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (M_TYPES)jarg7; 
  (arg1)->createTriangleMeshShape(arg2,(MVector3 const *)arg3,arg4,(void const *)arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_deleteShape(void * jarg1, void * jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_addChildShape(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  MVector3 *arg4 = 0 ;
  MQuaternion *arg5 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (MQuaternion *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->addChildShape(arg2,arg3,(MVector3 const &)*arg4,(MQuaternion const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_createConstraint(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  MVector3 *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (MVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  (arg1)->createConstraint(arg2,arg3,arg4,(MVector3 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setLinearLimit(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = 0 ;
  MVector3 *arg4 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearLimit(arg2,(MVector3 const &)*arg3,(MVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_setAngularLimit(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int arg2 ;
  MVector3 *arg3 = 0 ;
  MVector3 *arg4 = 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (MVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (MVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularLimit(arg2,(MVector3 const &)*arg3,(MVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MPhysicsContext_deleteConstraint(void * jarg1, void * jarg2) {
  MPhysicsContext *arg1 = (MPhysicsContext *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (MPhysicsContext *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->deleteConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MScriptContext(void * jarg1) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  
  arg1 = (MScriptContext *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_runScript(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->runScript((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_startCallFunction(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->startCallFunction((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_endCallFunction__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->endCallFunction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_endCallFunction__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  bool result;
  
  arg1 = (MScriptContext *)jarg1; 
  result = (bool)(arg1)->endCallFunction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_callFunction(void * jarg1, char * jarg2) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->callFunction((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_addFunction(void * jarg1, char * jarg2, void * jarg3) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  int (*arg3)(void) = (int (*)(void)) 0 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int (*)(void))jarg3; 
  (arg1)->addFunction((char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_runString(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->runString((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_getArgsNumber(void * jarg1) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  unsigned int result;
  
  arg1 = (MScriptContext *)jarg1; 
  result = (unsigned int)(arg1)->getArgsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_getIntArray(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  unsigned int arg2 ;
  int *arg3 = (int *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->getIntArray(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_getFloatArray(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->getFloatArray(arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MScriptContext_getString(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char *)(arg1)->getString(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MScriptContext_getInteger(void * jarg1, unsigned int jarg2) {
  int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->getInteger(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MScriptContext_getFloat(void * jarg1, unsigned int jarg2) {
  float jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  unsigned int arg2 ;
  float result;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (float)(arg1)->getFloat(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MScriptContext_getPointer(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (void *)(arg1)->getPointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_getBoolean(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->getBoolean(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_pushIntArray(void * jarg1, void * jarg2, unsigned int jarg3) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  int *arg2 = (int *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->pushIntArray((int const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_pushFloatArray(void * jarg1, void * jarg2, unsigned int jarg3) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->pushFloatArray((float const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_pushString(void * jarg1, char * jarg2) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->pushString((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_pushBoolean(void * jarg1, unsigned int jarg2) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  bool arg2 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->pushBoolean(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_pushInteger(void * jarg1, int jarg2) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  int arg2 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->pushInteger(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_pushFloat(void * jarg1, float jarg2) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  float arg2 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->pushFloat(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MScriptContext_pushPointer(void * jarg1, void * jarg2) {
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->pushPointer(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_isNumber(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->isNumber(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_isFunctionOk(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (MScriptContext *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->isFunctionOk((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MScriptContext_isRunning(void * jarg1) {
  unsigned int jresult ;
  MScriptContext *arg1 = (MScriptContext *) 0 ;
  bool result;
  
  arg1 = (MScriptContext *)jarg1; 
  result = (bool)(arg1)->isRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MImage() {
  void * jresult ;
  MImage *result = 0 ;
  
  result = (MImage *)new MImage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MImage(void * jarg1) {
  MImage *arg1 = (MImage *) 0 ;
  
  arg1 = (MImage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MImage_create(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  MImage *arg1 = (MImage *) 0 ;
  M_TYPES arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  arg1 = (MImage *)jarg1; 
  arg2 = (M_TYPES)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->create(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MImage_clear(void * jarg1, void * jarg2) {
  MImage *arg1 = (MImage *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (MImage *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MImage_readPixel(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  MImage *arg1 = (MImage *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (MImage *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->readPixel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MImage_writePixel(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  MImage *arg1 = (MImage *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (MImage *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->writePixel(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MImage_getData(void * jarg1) {
  void * jresult ;
  MImage *arg1 = (MImage *) 0 ;
  void *result = 0 ;
  
  arg1 = (MImage *)jarg1; 
  result = (void *)(arg1)->getData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MImage_getDataType(void * jarg1) {
  int jresult ;
  MImage *arg1 = (MImage *) 0 ;
  M_TYPES result;
  
  arg1 = (MImage *)jarg1; 
  result = (M_TYPES)(arg1)->getDataType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MImage_getComponents(void * jarg1) {
  unsigned int jresult ;
  MImage *arg1 = (MImage *) 0 ;
  unsigned int result;
  
  arg1 = (MImage *)jarg1; 
  result = (unsigned int)(arg1)->getComponents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MImage_getWidth(void * jarg1) {
  unsigned int jresult ;
  MImage *arg1 = (MImage *) 0 ;
  unsigned int result;
  
  arg1 = (MImage *)jarg1; 
  result = (unsigned int)(arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MImage_getHeight(void * jarg1) {
  unsigned int jresult ;
  MImage *arg1 = (MImage *) 0 ;
  unsigned int result;
  
  arg1 = (MImage *)jarg1; 
  result = (unsigned int)(arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MImage_getSize(void * jarg1) {
  unsigned int jresult ;
  MImage *arg1 = (MImage *) 0 ;
  unsigned int result;
  
  arg1 = (MImage *)jarg1; 
  result = (unsigned int)(arg1)->getSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MSound() {
  void * jresult ;
  MSound *result = 0 ;
  
  result = (MSound *)new MSound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MSound(void * jarg1) {
  MSound *arg1 = (MSound *) 0 ;
  
  arg1 = (MSound *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MSound_create(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  MSound *arg1 = (MSound *) 0 ;
  M_SOUND_FORMAT arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (MSound *)jarg1; 
  arg2 = (M_SOUND_FORMAT)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->create(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MSound_getData(void * jarg1) {
  void * jresult ;
  MSound *arg1 = (MSound *) 0 ;
  void *result = 0 ;
  
  arg1 = (MSound *)jarg1; 
  result = (void *)(arg1)->getData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MSound_getFormat(void * jarg1) {
  int jresult ;
  MSound *arg1 = (MSound *) 0 ;
  M_SOUND_FORMAT result;
  
  arg1 = (MSound *)jarg1; 
  result = (M_SOUND_FORMAT)(arg1)->getFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MSound_getSampleRate(void * jarg1) {
  unsigned int jresult ;
  MSound *arg1 = (MSound *) 0 ;
  unsigned int result;
  
  arg1 = (MSound *)jarg1; 
  result = (unsigned int)(arg1)->getSampleRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MSound_getSize(void * jarg1) {
  unsigned int jresult ;
  MSound *arg1 = (MSound *) 0 ;
  unsigned int result;
  
  arg1 = (MSound *)jarg1; 
  result = (unsigned int)(arg1)->getSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_getLocalFilename(char * jarg1, char * jarg2, char * jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  getLocalFilename(arg1,(char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_getGlobalFilename(char * jarg1, char * jarg2, char * jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  getGlobalFilename(arg1,(char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_getRepertory(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  getRepertory(arg1,(char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_readTextFile(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (char *)readTextFile((char const *)arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataRef_clear(void * jarg1) {
  MDataRef *arg1 = (MDataRef *) 0 ;
  
  arg1 = (MDataRef *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataRef_destroy(void * jarg1) {
  MDataRef *arg1 = (MDataRef *) 0 ;
  
  arg1 = (MDataRef *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataRef_incrScore(void * jarg1) {
  MDataRef *arg1 = (MDataRef *) 0 ;
  
  arg1 = (MDataRef *)jarg1; 
  (arg1)->incrScore();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataRef_decrScore(void * jarg1) {
  MDataRef *arg1 = (MDataRef *) 0 ;
  
  arg1 = (MDataRef *)jarg1; 
  (arg1)->decrScore();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDataRef_getScore(void * jarg1) {
  unsigned int jresult ;
  MDataRef *arg1 = (MDataRef *) 0 ;
  unsigned int result;
  
  arg1 = (MDataRef *)jarg1; 
  result = (unsigned int)(arg1)->getScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataRef_update(void * jarg1) {
  MDataRef *arg1 = (MDataRef *) 0 ;
  
  arg1 = (MDataRef *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT int SWIGSTDCALL CSharp_MDataRef_getType(void * jarg1) {
  int jresult ;
  MDataRef *arg1 = (MDataRef *) 0 ;
  int result;
  
  arg1 = (MDataRef *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataRef_setTime(void * jarg1, long jarg2) {
  MDataRef *arg1 = (MDataRef *) 0 ;
  long arg2 ;
  
  arg1 = (MDataRef *)jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_MDataRef_getTime(void * jarg1) {
  long jresult ;
  MDataRef *arg1 = (MDataRef *) 0 ;
  long result;
  
  arg1 = (MDataRef *)jarg1; 
  result = (long)(arg1)->getTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MDataRef_getFilename(void * jarg1) {
  char * jresult ;
  MDataRef *arg1 = (MDataRef *) 0 ;
  char *result = 0 ;
  
  arg1 = (MDataRef *)jarg1; 
  result = (char *)(arg1)->getFilename();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MDataRef(void * jarg1) {
  MDataRef *arg1 = (MDataRef *) 0 ;
  
  arg1 = (MDataRef *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MDataManager(void * jarg1) {
  MDataManager *arg1 = (MDataManager *) 0 ;
  
  arg1 = (MDataManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataManager_clear(void * jarg1) {
  MDataManager *arg1 = (MDataManager *) 0 ;
  
  arg1 = (MDataManager *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataManager_addRef(void * jarg1, void * jarg2) {
  MDataManager *arg1 = (MDataManager *) 0 ;
  MDataRef *arg2 = (MDataRef *) 0 ;
  
  arg1 = (MDataManager *)jarg1; 
  arg2 = (MDataRef *)jarg2; 
  (arg1)->addRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDataManager_getRef(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  MDataManager *arg1 = (MDataManager *) 0 ;
  unsigned int arg2 ;
  MDataRef *result = 0 ;
  
  arg1 = (MDataManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (MDataRef *)(arg1)->getRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDataManager_getRefsNumber(void * jarg1) {
  unsigned int jresult ;
  MDataManager *arg1 = (MDataManager *) 0 ;
  unsigned int result;
  
  arg1 = (MDataManager *)jarg1; 
  result = (unsigned int)(arg1)->getRefsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MDataManager() {
  void * jresult ;
  MDataManager *result = 0 ;
  
  result = (MDataManager *)new MDataManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MDataLoadFunction(void * jarg1) {
  void * jresult ;
  bool (*arg1)(char const *,void *) = (bool (*)(char const *,void *)) 0 ;
  MDataLoadFunction *result = 0 ;
  
  arg1 = (bool (*)(char const *,void *))jarg1; 
  result = (MDataLoadFunction *)new MDataLoadFunction(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MDataLoadFunction(void * jarg1) {
  MDataLoadFunction *arg1 = (MDataLoadFunction *) 0 ;
  
  arg1 = (MDataLoadFunction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataLoadFunction_m_functionPtr_set(void * jarg1, void * jarg2) {
  MDataLoadFunction *arg1 = (MDataLoadFunction *) 0 ;
  bool (*arg2)(char const *,void *) = (bool (*)(char const *,void *)) 0 ;
  
  arg1 = (MDataLoadFunction *)jarg1; 
  arg2 = (bool (*)(char const *,void *))jarg2; 
  if (arg1) (arg1)->m_functionPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MDataLoadFunction_m_functionPtr_get(void * jarg1) {
  void * jresult ;
  MDataLoadFunction *arg1 = (MDataLoadFunction *) 0 ;
  bool (*result)(char const *,void *) = 0 ;
  
  arg1 = (MDataLoadFunction *)jarg1; 
  result = (bool (*)(char const *,void *)) ((arg1)->m_functionPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MDataLoader() {
  void * jresult ;
  MDataLoader *result = 0 ;
  
  result = (MDataLoader *)new MDataLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MDataLoader(void * jarg1) {
  MDataLoader *arg1 = (MDataLoader *) 0 ;
  
  arg1 = (MDataLoader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataLoader_clear(void * jarg1) {
  MDataLoader *arg1 = (MDataLoader *) 0 ;
  
  arg1 = (MDataLoader *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MDataLoader_addLoader(void * jarg1, void * jarg2) {
  MDataLoader *arg1 = (MDataLoader *) 0 ;
  bool (*arg2)(char const *,void *) = (bool (*)(char const *,void *)) 0 ;
  
  arg1 = (MDataLoader *)jarg1; 
  arg2 = (bool (*)(char const *,void *))jarg2; 
  (arg1)->addLoader(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MDataLoader_loadData(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  MDataLoader *arg1 = (MDataLoader *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (MDataLoader *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (void *)jarg3; 
  result = (bool)(arg1)->loadData((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_BONE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_CAMERA_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_LIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_ENTITY_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_SOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_OBJECT3D_TEXT_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_MESH_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_TEXTURE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_SOUND_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_ARMATURE_ANIM_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_MATERIALS_ANIM_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_TEXTURES_ANIM_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_SHADER_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M_REF_FONT_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NeoEngine() {
  void * jresult ;
  Neo::NeoEngine *result = 0 ;
  
  result = (Neo::NeoEngine *)new Neo::NeoEngine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NeoEngine(void * jarg1) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getInstance() {
  void * jresult ;
  Neo::NeoEngine *result = 0 ;
  
  result = (Neo::NeoEngine *)Neo::NeoEngine::getInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setActive(void * jarg1, unsigned int jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActive(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NeoEngine_isActive(void * jarg1) {
  unsigned int jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  bool result;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setSoundContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MSoundContext *arg2 = (MSoundContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (MSoundContext *)jarg2; 
  (arg1)->setSoundContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setRenderingContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MRenderingContext *arg2 = (MRenderingContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (MRenderingContext *)jarg2; 
  (arg1)->setRenderingContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setPhysicsContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MPhysicsContext *arg2 = (MPhysicsContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (MPhysicsContext *)jarg2; 
  (arg1)->setPhysicsContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setScriptContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MScriptContext *arg2 = (MScriptContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (MScriptContext *)jarg2; 
  (arg1)->setScriptContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setInputContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MInputContext *arg2 = (MInputContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (MInputContext *)jarg2; 
  (arg1)->setInputContext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setSystemContext(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MSystemContext *arg2 = (MSystemContext *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (MSystemContext *)jarg2; 
  (arg1)->setSystemContext(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getSoundContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MSoundContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MSoundContext *)(arg1)->getSoundContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getRenderingContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MRenderingContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MRenderingContext *)(arg1)->getRenderingContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getPhysicsContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MPhysicsContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MPhysicsContext *)(arg1)->getPhysicsContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getScriptContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MScriptContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MScriptContext *)(arg1)->getScriptContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getInputContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MInputContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MInputContext *)(arg1)->getInputContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getSystemContext(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MSystemContext *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MSystemContext *)(arg1)->getSystemContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getFontLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MDataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MDataLoader *)(arg1)->getFontLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getImageLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MDataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MDataLoader *)(arg1)->getImageLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getSoundLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MDataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MDataLoader *)(arg1)->getSoundLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getMeshLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MDataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MDataLoader *)(arg1)->getMeshLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getArmatureAnimLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MDataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MDataLoader *)(arg1)->getArmatureAnimLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getTexturesAnimLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MDataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MDataLoader *)(arg1)->getTexturesAnimLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getMaterialsAnimLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MDataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MDataLoader *)(arg1)->getMaterialsAnimLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getLevelLoader(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MDataLoader *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MDataLoader *)(arg1)->getLevelLoader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getBehaviorManager(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  BehaviorManager *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (BehaviorManager *)(arg1)->getBehaviorManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getRendererManager(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  RendererManager *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (RendererManager *)(arg1)->getRendererManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setPackageManager(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MPackageManager *arg2 = (MPackageManager *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (MPackageManager *)jarg2; 
  (arg1)->setPackageManager(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getPackageManager(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  MPackageManager *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (MPackageManager *)(arg1)->getPackageManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_updateRequests(void * jarg1) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  (arg1)->updateRequests();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setLevel(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Level *arg2 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::Level *)jarg2; 
  (arg1)->setLevel(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NeoEngine_loadLevel(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->loadLevel((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_requestLoadLevel(void * jarg1, char * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->requestLoadLevel((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NeoEngine_doesLevelExist(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->doesLevelExist((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getLevel(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::Level *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::Level *)(arg1)->getLevel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setGame(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::NeoGame *arg2 = (Neo::NeoGame *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Neo::NeoGame *)jarg2; 
  (arg1)->setGame(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getGame(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Neo::NeoGame *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Neo::NeoGame *)(arg1)->getGame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NeoEngine_setRenderer(void * jarg1, void * jarg2) {
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Renderer *arg2 = (Renderer *) 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  arg2 = (Renderer *)jarg2; 
  (arg1)->setRenderer(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NeoEngine_getRenderer(void * jarg1) {
  void * jresult ;
  Neo::NeoEngine *arg1 = (Neo::NeoEngine *) 0 ;
  Renderer *result = 0 ;
  
  arg1 = (Neo::NeoEngine *)jarg1; 
  result = (Renderer *)(arg1)->getRenderer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Level() {
  void * jresult ;
  Neo::Level *result = 0 ;
  
  result = (Neo::Level *)new Neo::Level();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Level(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_clear(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_clearScenes(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  (arg1)->clearScenes();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getFXManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  FXManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (FXManager *)(arg1)->getFXManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_createFX(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::ShaderRef *arg2 = (Neo::ShaderRef *) 0 ;
  Neo::ShaderRef *arg3 = (Neo::ShaderRef *) 0 ;
  FXRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (Neo::ShaderRef *)jarg2; 
  arg3 = (Neo::ShaderRef *)jarg3; 
  result = (FXRef *)(arg1)->createFX(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getFontManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (MDataManager *)(arg1)->getFontManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getTextureManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (MDataManager *)(arg1)->getTextureManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getShaderManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (MDataManager *)(arg1)->getShaderManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getSoundManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (MDataManager *)(arg1)->getSoundManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getMeshManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (MDataManager *)(arg1)->getMeshManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getArmatureAnimManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (MDataManager *)(arg1)->getArmatureAnimManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getTexturesAnimManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (MDataManager *)(arg1)->getTexturesAnimManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getMaterialsAnimManager(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataManager *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (MDataManager *)(arg1)->getMaterialsAnimManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadFont(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::FontRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::FontRef *)(arg1)->loadFont((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadMesh__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::MeshRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::MeshRef *)(arg1)->loadMesh((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadMesh__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::MeshRef *)(arg1)->loadMesh((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadArmatureAnim__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::ArmatureAnimRef *)(arg1)->loadArmatureAnim((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadArmatureAnim__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::ArmatureAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::ArmatureAnimRef *)(arg1)->loadArmatureAnim((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexturesAnim__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::TexturesAnimRef *)(arg1)->loadTexturesAnim((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexturesAnim__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TexturesAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::TexturesAnimRef *)(arg1)->loadTexturesAnim((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadMaterialsAnim__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::MaterialsAnimRef *)(arg1)->loadMaterialsAnim((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadMaterialsAnim__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::MaterialsAnimRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::MaterialsAnimRef *)(arg1)->loadMaterialsAnim((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexture__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexture__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadTexture__SWIG_2(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::TextureRef *)(arg1)->loadTexture((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadSound__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  Neo::SoundRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (Neo::SoundRef *)(arg1)->loadSound((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadSound__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::SoundRef *)(arg1)->loadSound((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_loadShader(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  M_SHADER_TYPES arg3 ;
  M_SHADER_TYPES *argp3 ;
  Neo::ShaderRef *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (M_SHADER_TYPES *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null M_SHADER_TYPES", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (Neo::ShaderRef *)(arg1)->loadShader((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_sendToUpdateQueue(void * jarg1, void * jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataRef *arg2 = (MDataRef *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (MDataRef *)jarg2; 
  (arg1)->sendToUpdateQueue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_sendToClearQueue(void * jarg1, void * jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  MDataRef *arg2 = (MDataRef *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (MDataRef *)jarg2; 
  (arg1)->sendToClearQueue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_updateQueueDatas(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  (arg1)->updateQueueDatas();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_clearQueueDatas(void * jarg1) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  (arg1)->clearQueueDatas();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_changeCurrentScene(void * jarg1, unsigned int jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->changeCurrentScene(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_deleteScene(void * jarg1, unsigned int jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->deleteScene(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Level_getSceneIndexByName(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (bool)(arg1)->getSceneIndexByName((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_addNewScene(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::Scene *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::Scene *)(arg1)->addNewScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getSceneByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Scene *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::Scene *)(arg1)->getSceneByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getCurrentScene(void * jarg1) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  Neo::Scene *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (Neo::Scene *)(arg1)->getCurrentScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Level_setCurrentSceneId(void * jarg1, unsigned int jarg2) {
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCurrentSceneId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Level_getCurrentSceneId(void * jarg1) {
  unsigned int jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (unsigned int)(arg1)->getCurrentSceneId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Level_getScenesNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Level *)jarg1; 
  result = (unsigned int)(arg1)->getScenesNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Level_getSceneByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Level *arg1 = (Neo::Level *) 0 ;
  unsigned int arg2 ;
  Neo::Scene *result = 0 ;
  
  arg1 = (Neo::Level *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Scene *)(arg1)->getSceneByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Scene() {
  void * jresult ;
  Neo::Scene *result = 0 ;
  
  result = (Neo::Scene *)new Neo::Scene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Scene(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setName(void * jarg1, char * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Scene_getName(void * jarg1) {
  char * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getAmbientLight(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (arg1)->getAmbientLight();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setAmbientLight(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  MVector3 arg2 ;
  MVector3 *argp2 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  argp2 = (MVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setAmbientLight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setDataMode(void * jarg1, int jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::M_DATA_MODES arg2 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::M_DATA_MODES)jarg2; 
  (arg1)->setDataMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_getDataMode(void * jarg1) {
  int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::M_DATA_MODES result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::M_DATA_MODES)(arg1)->getDataMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setScriptFilename(void * jarg1, char * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setScriptFilename((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Scene_getScriptFilename(void * jarg1) {
  char * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (char *)(arg1)->getScriptFilename();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setGravity(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((MVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getGravity(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = ((Neo::Scene const *)arg1)->getGravity();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_playLoopSounds(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->playLoopSounds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_stopAllSounds(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->stopAllSounds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_deleteObject(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2; 
  (arg1)->deleteObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewCamera__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::OCamera *)(arg1)->addNewCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewCamera__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg2 = 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OCamera const & type is null", 0);
    return 0;
  } 
  result = (Neo::OCamera *)(arg1)->addNewCamera((Neo::OCamera const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewLight__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::OLight *)(arg1)->addNewLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewGroup__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::Object3d *)(arg1)->addNewGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewGroup__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::Object3d *arg2 = 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Object3d const & type is null", 0);
    return 0;
  } 
  result = (Neo::Object3d *)(arg1)->addNewGroup((Neo::Object3d const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewLight__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OLight *arg2 = 0 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OLight *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OLight const & type is null", 0);
    return 0;
  } 
  result = (Neo::OLight *)(arg1)->addNewLight((Neo::OLight const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewEntity__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::MeshRef *arg2 = (Neo::MeshRef *) 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::MeshRef *)jarg2; 
  result = (Neo::OEntity *)(arg1)->addNewEntity(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewEntity__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OEntity *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OEntity const & type is null", 0);
    return 0;
  } 
  result = (Neo::OEntity *)(arg1)->addNewEntity((Neo::OEntity const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewSound__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::SoundRef *arg2 = (Neo::SoundRef *) 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::SoundRef *)jarg2; 
  result = (Neo::OSound *)(arg1)->addNewSound(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewSound__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OSound *arg2 = 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OSound *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OSound const & type is null", 0);
    return 0;
  } 
  result = (Neo::OSound *)(arg1)->addNewSound((Neo::OSound const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewText__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::FontRef *arg2 = (Neo::FontRef *) 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::FontRef *)jarg2; 
  result = (Neo::OText *)(arg1)->addNewText(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_addNewText__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OText *arg2 = 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OText const & type is null", 0);
    return 0;
  } 
  result = (Neo::OText *)(arg1)->addNewText((Neo::OText const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getObjectsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getObjectsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getCamerasNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getCamerasNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getLightsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getLightsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getEntitiesNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getEntitiesNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getSoundsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getSoundsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getTextsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getTextsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setCurrentCameraId(void * jarg1, unsigned int jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCurrentCameraId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getCurrentCameraId(void * jarg1) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (unsigned int)(arg1)->getCurrentCameraId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getCurrentCamera(void * jarg1) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (Neo::OCamera *)(arg1)->getCurrentCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_setCurrentFrame(void * jarg1, int jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  int arg2 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCurrentFrame(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Scene_getCurrentFrame(void * jarg1) {
  int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  int result;
  
  arg1 = (Neo::Scene *)jarg1; 
  result = (int)(arg1)->getCurrentFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getObjectByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::Object3d *)(arg1)->getObjectByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getObjectByHandle(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned long arg2 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (Neo::Object3d *)(arg1)->getObjectByHandle(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getLightByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OLight *)(arg1)->getLightByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getCameraByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OCamera *)(arg1)->getCameraByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getEntityByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OEntity *)(arg1)->getEntityByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getSoundByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OSound *)(arg1)->getSoundByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getTextByName(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Neo::OText *)(arg1)->getTextByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Scene_getObjectIndex(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (bool)(arg1)->getObjectIndex((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getObjectByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Object3d *)(arg1)->getObjectByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getLightByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OLight *)(arg1)->getLightByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getCameraByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OCamera *)(arg1)->getCameraByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getEntityByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OEntity *)(arg1)->getEntityByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getSoundByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OSound *)(arg1)->getSoundByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scene_getTextByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  unsigned int arg2 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::OText *)(arg1)->getTextByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_begin(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_end(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->end();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_prepareCollisionShape(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OEntity *)jarg2; 
  (arg1)->prepareCollisionShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_prepareCollisionObject(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OEntity *)jarg2; 
  (arg1)->prepareCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_prepareConstraints(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OEntity *arg2 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OEntity *)jarg2; 
  (arg1)->prepareConstraints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_preparePhysics(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->preparePhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_updatePhysics(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->updatePhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_update(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_updateObjectsBehaviors(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->updateObjectsBehaviors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_drawObjectsBehaviors(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->drawObjectsBehaviors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_updateObjectsMatrices(void * jarg1) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  (arg1)->updateObjectsMatrices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Scene_draw(void * jarg1, void * jarg2) {
  Neo::Scene *arg1 = (Neo::Scene *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::Scene *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->draw(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object3d__SWIG_0() {
  void * jresult ;
  Neo::Object3d *result = 0 ;
  
  result = (Neo::Object3d *)new Neo::Object3d();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Object3d(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object3d__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::Object3d const & type is null", 0);
    return 0;
  } 
  result = (Neo::Object3d *)new Neo::Object3d((Neo::Object3d const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_updateMatrix(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->updateMatrix();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_computeLocalMatrix(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->computeLocalMatrix();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getMatrix(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MMatrix4x4 *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (MMatrix4x4 *)(arg1)->getMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_unlinkChilds(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->unlinkChilds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_computeChildsMatrices(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->computeChildsMatrices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setAttribute(void * jarg1, char * jarg2, void * jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  NeoVariable arg3 ;
  NeoVariable *argp3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (NeoVariable *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null NeoVariable", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getAttribute(void * jarg1, char * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  NeoVariable result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->getAttribute((char const *)arg2);
  jresult = new NeoVariable((const NeoVariable &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getUniformRotatedVector(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = (arg1)->getUniformRotatedVector((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getInverseRotatedVector(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Object3d const *)arg1)->getInverseRotatedVector((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getRotatedVector(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Object3d const *)arg1)->getRotatedVector((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getInversePosition(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Object3d const *)arg1)->getInversePosition((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getTransformedVector(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::Object3d const *)arg1)->getTransformedVector((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setPosition(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setPosition((MVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getTransformedPosition(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getTransformedPosition();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getPosition(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getPosition();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setEulerRotation(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setEulerRotation((MVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setAxisAngleRotation(void * jarg1, void * jarg2, float jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->setAxisAngleRotation((MVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_addAxisAngleRotation(void * jarg1, void * jarg2, float jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->addAxisAngleRotation((MVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setRotation(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MQuaternion *arg2 = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setRotation((MQuaternion const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getTransformedRotation(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getTransformedRotation();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getEulerRotation(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getEulerRotation();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getRotation(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MQuaternion result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getRotation();
  jresult = new MQuaternion((const MQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setScale(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setScale((MVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getTransformedScale(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getTransformedScale();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getScale(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = ((Neo::Object3d const *)arg1)->getScale();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_linkTo(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2; 
  (arg1)->linkTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_unLink(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->unLink();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setParent(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2; 
  (arg1)->setParent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_addChild(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *arg2 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::Object3d *)jarg2; 
  (arg1)->addChild(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_hasParent(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (bool)(arg1)->hasParent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_getChildsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (unsigned int)(arg1)->getChildsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getParent(void * jarg1) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (Neo::Object3d *)(arg1)->getParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getChild(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Neo::Object3d *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Neo::Object3d *)(arg1)->getChild(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Object3d_getId(void * jarg1) {
  unsigned long jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned long result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (unsigned long)(arg1)->getId();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setId(void * jarg1, unsigned long jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->setId(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_updateBehaviors(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->updateBehaviors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_drawBehaviors(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->drawBehaviors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_deleteBehavior(void * jarg1, unsigned int jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->deleteBehavior(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_invertBehavior(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->invertBehavior(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_changeBehavior(void * jarg1, unsigned int jarg2, void * jarg3) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Behavior *arg3 = (Behavior *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (Behavior *)jarg3; 
  (arg1)->changeBehavior(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_addBehavior(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Behavior *arg2 = (Behavior *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Behavior *)jarg2; 
  (arg1)->addBehavior(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_getBehaviorsNumber(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (unsigned int)(arg1)->getBehaviorsNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object3d_getBehavior(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  unsigned int arg2 ;
  Behavior *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (Behavior *)(arg1)->getBehavior(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_needToUpdate(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (bool)(arg1)->needToUpdate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setActive(void * jarg1, unsigned int jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActive(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_isActive(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (bool)(arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setVisible(void * jarg1, unsigned int jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object3d_isVisible(void * jarg1) {
  unsigned int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  bool result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (bool)(arg1)->isVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_updateVisibility(void * jarg1, void * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->updateVisibility(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_setName(void * jarg1, char * jarg2) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Object3d_getName(void * jarg1) {
  char * jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (char *)(arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Object3d_getType(void * jarg1) {
  int jresult ;
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  int result;
  
  arg1 = (Neo::Object3d *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object3d_update(void * jarg1) {
  Neo::Object3d *arg1 = (Neo::Object3d *) 0 ;
  
  arg1 = (Neo::Object3d *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsConstraint__SWIG_0() {
  void * jresult ;
  Neo::PhysicsConstraint *result = 0 ;
  
  result = (Neo::PhysicsConstraint *)new Neo::PhysicsConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsConstraint__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::PhysicsConstraint const & type is null", 0);
    return 0;
  } 
  result = (Neo::PhysicsConstraint *)new Neo::PhysicsConstraint((Neo::PhysicsConstraint const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_constraintId_set(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->constraintId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsConstraint_constraintId_get(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (unsigned int) ((arg1)->constraintId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_parentObjectId_set(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->parentObjectId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsConstraint_parentObjectId_get(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (unsigned int) ((arg1)->parentObjectId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_parentName_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MString arg2 ;
  MString *argp2 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  argp2 = (MString *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MString", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->parentName = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_parentName_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MString result;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result =  ((arg1)->parentName);
  jresult = new MString((const MString &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_pivot_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *arg2 = (MVector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (MVector3 *)jarg2; 
  if (arg1) (arg1)->pivot = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_pivot_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (MVector3 *)& ((arg1)->pivot);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_lowerLinearLimit_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *arg2 = (MVector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (MVector3 *)jarg2; 
  if (arg1) (arg1)->lowerLinearLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_lowerLinearLimit_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (MVector3 *)& ((arg1)->lowerLinearLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_upperLinearLimit_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *arg2 = (MVector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (MVector3 *)jarg2; 
  if (arg1) (arg1)->upperLinearLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_upperLinearLimit_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (MVector3 *)& ((arg1)->upperLinearLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_lowerAngularLimit_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *arg2 = (MVector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (MVector3 *)jarg2; 
  if (arg1) (arg1)->lowerAngularLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_lowerAngularLimit_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (MVector3 *)& ((arg1)->lowerAngularLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_upperAngularLimit_set(void * jarg1, void * jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *arg2 = (MVector3 *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = (MVector3 *)jarg2; 
  if (arg1) (arg1)->upperAngularLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsConstraint_upperAngularLimit_get(void * jarg1) {
  void * jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (MVector3 *)& ((arg1)->upperAngularLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsConstraint_disableParentCollision_set(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disableParentCollision = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsConstraint_disableParentCollision_get(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  bool result;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  result = (bool) ((arg1)->disableParentCollision);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhysicsConstraint(void * jarg1) {
  Neo::PhysicsConstraint *arg1 = (Neo::PhysicsConstraint *) 0 ;
  
  arg1 = (Neo::PhysicsConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsProperties__SWIG_0() {
  void * jresult ;
  Neo::PhysicsProperties *result = 0 ;
  
  result = (Neo::PhysicsProperties *)new Neo::PhysicsProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsProperties__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::PhysicsProperties *arg1 = 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::PhysicsProperties const & type is null", 0);
    return 0;
  } 
  result = (Neo::PhysicsProperties *)new Neo::PhysicsProperties((Neo::PhysicsProperties const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhysicsProperties(void * jarg1) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_deleteConstraint(void * jarg1) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  (arg1)->deleteConstraint();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsProperties_createConstraint(void * jarg1) {
  void * jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (Neo::PhysicsConstraint *)(arg1)->createConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsProperties_getConstraint(void * jarg1) {
  void * jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::PhysicsConstraint *result = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (Neo::PhysicsConstraint *)(arg1)->getConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setShapeId(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setShapeId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsProperties_getShapeId(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (unsigned int)(arg1)->getShapeId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setCollisionObjectId(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setCollisionObjectId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsProperties_getCollisionObjectId(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (unsigned int)(arg1)->getCollisionObjectId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setCollisionShape(void * jarg1, int jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::COLLISION_SHAPE_TYPE arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (Neo::COLLISION_SHAPE_TYPE)jarg2; 
  (arg1)->setCollisionShape(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsProperties_getCollisionShape(void * jarg1) {
  int jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  Neo::COLLISION_SHAPE_TYPE result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (Neo::COLLISION_SHAPE_TYPE)(arg1)->getCollisionShape();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setGhost(void * jarg1, unsigned int jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setGhost(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsProperties_isGhost(void * jarg1) {
  unsigned int jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  bool result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (bool)(arg1)->isGhost();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setMass(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMass(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getMass(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setFriction(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFriction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getFriction(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setRestitution(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRestitution(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getRestitution(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getRestitution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setLinearDamping(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setLinearDamping(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getLinearDamping(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getLinearDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setAngularDamping(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAngularDamping(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getAngularDamping(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getAngularDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setAngularFactor(void * jarg1, float jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAngularFactor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PhysicsProperties_getAngularFactor(void * jarg1) {
  float jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  float result;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (float)(arg1)->getAngularFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsProperties_setLinearFactor(void * jarg1, void * jarg2) {
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearFactor((MVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsProperties_getLinearFactor(void * jarg1) {
  void * jresult ;
  Neo::PhysicsProperties *arg1 = (Neo::PhysicsProperties *) 0 ;
  MVector3 *result = 0 ;
  
  arg1 = (Neo::PhysicsProperties *)jarg1; 
  result = (MVector3 *)(arg1)->getLinearFactor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OEntity__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::MeshRef *arg1 = (Neo::MeshRef *) 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::MeshRef *)jarg1; 
  result = (Neo::OEntity *)new Neo::OEntity(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OEntity(void * jarg1) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OEntity__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = 0 ;
  Neo::OEntity *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OEntity const & type is null", 0);
    return 0;
  } 
  result = (Neo::OEntity *)new Neo::OEntity((Neo::OEntity const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_enableOccluder(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableOccluder(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_isOccluder(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (bool)(arg1)->isOccluder();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OEntity_getType(void * jarg1) {
  int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  int result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setActive(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActive(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setInvisible(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInvisible(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_isInvisible(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (bool)(arg1)->isInvisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_getMesh(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Mesh *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Mesh *)(arg1)->getMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setMeshRef(void * jarg1, void * jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::MeshRef *arg2 = (Neo::MeshRef *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (Neo::MeshRef *)jarg2; 
  (arg1)->setMeshRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_getMeshRef(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::MeshRef *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Neo::MeshRef *)(arg1)->getMeshRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_changeAnimation(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->changeAnimation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_isAnimationOver(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (bool)(arg1)->isAnimationOver();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setAnimationSpeed(void * jarg1, float jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setAnimationSpeed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_setCurrentFrame(void * jarg1, float jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setCurrentFrame(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_getAnimationId(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (unsigned int)(arg1)->getAnimationId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OEntity_getAnimationSpeed(void * jarg1) {
  float jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (float)(arg1)->getAnimationSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OEntity_getCurrentFrame(void * jarg1) {
  float jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  float result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (float)(arg1)->getCurrentFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_deletePhysicsProperties(void * jarg1) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  (arg1)->deletePhysicsProperties();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_createPhysicsProperties(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Neo::PhysicsProperties *)(arg1)->createPhysicsProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_getPhysicsProperties(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::PhysicsProperties *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Neo::PhysicsProperties *)(arg1)->getPhysicsProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OEntity_getBoundingBox(void * jarg1) {
  void * jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Box3d *result = 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (Box3d *)(arg1)->getBoundingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OEntity_hasShadow(void * jarg1) {
  unsigned int jresult ;
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool result;
  
  arg1 = (Neo::OEntity *)jarg1; 
  result = (bool)(arg1)->hasShadow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_enableShadow(void * jarg1, unsigned int jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableShadow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_update(void * jarg1) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OEntity_updateVisibility(void * jarg1, void * jarg2) {
  Neo::OEntity *arg1 = (Neo::OEntity *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OEntity *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->updateVisibility(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OLight__SWIG_0() {
  void * jresult ;
  Neo::OLight *result = 0 ;
  
  result = (Neo::OLight *)new Neo::OLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OLight(void * jarg1) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OLight__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OLight *arg1 = 0 ;
  Neo::OLight *result = 0 ;
  
  arg1 = (Neo::OLight *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OLight const & type is null", 0);
    return 0;
  } 
  result = (Neo::OLight *)new Neo::OLight((Neo::OLight const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OLight_getType(void * jarg1) {
  int jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  int result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setLightType(void * jarg1, int jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::LIGHT_TYPES arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (Neo::LIGHT_TYPES)jarg2; 
  (arg1)->setLightType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OLight_getLightType(void * jarg1) {
  int jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::LIGHT_TYPES result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (Neo::LIGHT_TYPES)(arg1)->getLightType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_castShadow(void * jarg1, unsigned int jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->castShadow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setShadowQuality(void * jarg1, unsigned int jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setShadowQuality(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setShadowBias(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setShadowBias(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setShadowBlur(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setShadowBlur(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OLight_isCastingShadow(void * jarg1) {
  unsigned int jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  bool result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (bool)(arg1)->isCastingShadow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OLight_getShadowQuality(void * jarg1) {
  unsigned int jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (unsigned int)(arg1)->getShadowQuality();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getShadowBias(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getShadowBias();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getShadowBlur(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getShadowBlur();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setRadius(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getRadius(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setIntensity(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setIntensity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setColor(void * jarg1, void * jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  MVector3 *arg2 = 0 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setColor((MVector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getIntensity(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getIntensity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OLight_getColor(void * jarg1) {
  void * jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = ((Neo::OLight const *)arg1)->getColor();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OLight_getFinalColor(void * jarg1) {
  void * jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = ((Neo::OLight const *)arg1)->getFinalColor();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setSpotAngle(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setSpotAngle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_setSpotExponent(void * jarg1, float jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setSpotExponent(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getSpotAngle(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getSpotAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OLight_getSpotExponent(void * jarg1) {
  float jresult ;
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  float result;
  
  arg1 = (Neo::OLight *)jarg1; 
  result = (float)(arg1)->getSpotExponent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OLight_updateVisibility(void * jarg1, void * jarg2) {
  Neo::OLight *arg1 = (Neo::OLight *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OLight *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->updateVisibility(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSound__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::SoundRef *arg1 = (Neo::SoundRef *) 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::SoundRef *)jarg1; 
  result = (Neo::OSound *)new Neo::OSound(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OSound(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OSound__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OSound *arg1 = 0 ;
  Neo::OSound *result = 0 ;
  
  arg1 = (Neo::OSound *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OSound const & type is null", 0);
    return 0;
  } 
  result = (Neo::OSound *)new Neo::OSound((Neo::OSound const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OSound_getType(void * jarg1) {
  int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  int result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setSoundRef(void * jarg1, void * jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  Neo::SoundRef *arg2 = (Neo::SoundRef *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (Neo::SoundRef *)jarg2; 
  (arg1)->setSoundRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OSound_getSoundRef(void * jarg1) {
  void * jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  Neo::SoundRef *result = 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (Neo::SoundRef *)(arg1)->getSoundRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSound_getSourceId(void * jarg1) {
  unsigned int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (unsigned int)(arg1)->getSourceId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setLooping(void * jarg1, unsigned int jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLooping(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setRelative(void * jarg1, unsigned int jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setRelative(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setPitch(void * jarg1, float jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setPitch(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setGain(void * jarg1, float jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setGain(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setRadius(void * jarg1, float jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_setRolloff(void * jarg1, float jarg2) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRolloff(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSound_isPlaying(void * jarg1) {
  unsigned int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (bool)(arg1)->isPlaying();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSound_isLooping(void * jarg1) {
  unsigned int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (bool)(arg1)->isLooping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OSound_isRelative(void * jarg1) {
  unsigned int jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  bool result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (bool)(arg1)->isRelative();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getPitch(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getGain(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getGain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getRadius(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getRolloff(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getRolloff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getTimePos(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getTimePos();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OSound_getSoundDuration(void * jarg1) {
  float jresult ;
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  float result;
  
  arg1 = (Neo::OSound *)jarg1; 
  result = (float)(arg1)->getSoundDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_play(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  (arg1)->play();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_pause(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  (arg1)->pause();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_stop(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OSound_update(void * jarg1) {
  Neo::OSound *arg1 = (Neo::OSound *) 0 ;
  
  arg1 = (Neo::OSound *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OText__SWIG_0(void * jarg1) {
  void * jresult ;
  Neo::FontRef *arg1 = (Neo::FontRef *) 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::FontRef *)jarg1; 
  result = (Neo::OText *)new Neo::OText(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OText(void * jarg1) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OText__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = 0 ;
  Neo::OText *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OText const & type is null", 0);
    return 0;
  } 
  result = (Neo::OText *)new Neo::OText((Neo::OText const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OText_getType(void * jarg1) {
  int jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  int result;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setFontRef(void * jarg1, void * jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::FontRef *arg2 = (Neo::FontRef *) 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (Neo::FontRef *)jarg2; 
  (arg1)->setFontRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getFont(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Font *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (Font *)(arg1)->getFont();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getFontRef(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::FontRef *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (Neo::FontRef *)(arg1)->getFontRef();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setText(void * jarg1, char * jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->setText((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OText_getText(void * jarg1) {
  char * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  char *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (char *)(arg1)->getText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getLinesOffset(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  vector< float > *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (vector< float > *)(arg1)->getLinesOffset();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setAlign(void * jarg1, int jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::TEXT_ALIGN_MODES arg2 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (Neo::TEXT_ALIGN_MODES)jarg2; 
  (arg1)->setAlign(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OText_getAlign(void * jarg1) {
  int jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::TEXT_ALIGN_MODES result;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (Neo::TEXT_ALIGN_MODES)(arg1)->getAlign();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setSize(void * jarg1, float jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_OText_getSize(void * jarg1) {
  float jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  float result;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (float)(arg1)->getSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_setColor(void * jarg1, void * jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  MVector4 *arg2 = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (MVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector4 const & type is null", 0);
    return ;
  } 
  (arg1)->setColor((MVector4 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getColor(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  MVector4 result;
  
  arg1 = (Neo::OText *)jarg1; 
  result = ((Neo::OText const *)arg1)->getColor();
  jresult = new MVector4((const MVector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OText_getBoundingBox(void * jarg1) {
  void * jresult ;
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Box3d *result = 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  result = (Box3d *)(arg1)->getBoundingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OText_updateVisibility(void * jarg1, void * jarg2) {
  Neo::OText *arg1 = (Neo::OText *) 0 ;
  Neo::OCamera *arg2 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OText *)jarg1; 
  arg2 = (Neo::OCamera *)jarg2; 
  (arg1)->updateVisibility(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OCamera__SWIG_0() {
  void * jresult ;
  Neo::OCamera *result = 0 ;
  
  result = (Neo::OCamera *)new Neo::OCamera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OCamera(void * jarg1) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OCamera__SWIG_1(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = 0 ;
  Neo::OCamera *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Neo::OCamera const & type is null", 0);
    return 0;
  } 
  result = (Neo::OCamera *)new Neo::OCamera((Neo::OCamera const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OCamera_getType(void * jarg1) {
  int jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  int result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (int)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_enableFog(void * jarg1, unsigned int jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableFog(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getFogColor(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (arg1)->getFogColor();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setFogColor(void * jarg1, void * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  MVector3 arg2 ;
  MVector3 *argp2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  argp2 = (MVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setFogColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_enableOrtho(void * jarg1, unsigned int jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableOrtho(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setFov(void * jarg1, float jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFov(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setFogDistance(void * jarg1, float jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setFogDistance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setClippingNear(void * jarg1, float jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setClippingNear(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setClippingFar(void * jarg1, float jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setClippingFar(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OCamera_isOrtho(void * jarg1) {
  unsigned int jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (bool)(arg1)->isOrtho();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OCamera_hasFog(void * jarg1) {
  unsigned int jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  bool result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (bool)(arg1)->hasFog();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OCamera_getClippingNear(void * jarg1) {
  float jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (float)(arg1)->getClippingNear();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OCamera_getClippingFar(void * jarg1) {
  float jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (float)(arg1)->getClippingFar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OCamera_getFov(void * jarg1) {
  float jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (float)(arg1)->getFov();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_OCamera_getFogDistance(void * jarg1) {
  float jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  float result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (float)(arg1)->getFogDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setClearColor(void * jarg1, void * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  MVector3 arg2 ;
  MVector3 *argp2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  argp2 = (MVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setClearColor(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getClearColor(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  MVector3 result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = ((Neo::OCamera const *)arg1)->getClearColor();
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getProjectedPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::OCamera const *)arg1)->getProjectedPoint((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getUnProjectedPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  MVector3 *arg2 = 0 ;
  MVector3 result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (MVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MVector3 const & type is null", 0);
    return 0;
  } 
  result = ((Neo::OCamera const *)arg1)->getUnProjectedPoint((MVector3 const &)*arg2);
  jresult = new MVector3((const MVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getCurrentViewMatrix(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  MMatrix4x4 *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (MMatrix4x4 *)(arg1)->getCurrentViewMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getCurrentProjMatrix(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  MMatrix4x4 *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (MMatrix4x4 *)(arg1)->getCurrentProjMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getCurrentViewport(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  int *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (int *)(arg1)->getCurrentViewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getFrustum(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Frustum *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Frustum *)(arg1)->getFrustum();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setSceneLayer(void * jarg1, unsigned int jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setSceneLayer(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OCamera_getSceneLayer(void * jarg1) {
  unsigned int jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  unsigned int result;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (unsigned int)(arg1)->getSceneLayer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setRenderColorTexture(void * jarg1, void * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (Neo::TextureRef *)jarg2; 
  (arg1)->setRenderColorTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_setRenderDepthTexture(void * jarg1, void * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *arg2 = (Neo::TextureRef *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (Neo::TextureRef *)jarg2; 
  (arg1)->setRenderDepthTexture(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getRenderColorTexture(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Neo::TextureRef *)(arg1)->getRenderColorTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getRenderDepthTexture(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Neo::TextureRef *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Neo::TextureRef *)(arg1)->getRenderDepthTexture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_drawSkybox(void * jarg1) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  (arg1)->drawSkybox();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_loadSkybox(void * jarg1, char * jarg2) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->loadSkybox((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OCamera_getSkybox(void * jarg1) {
  void * jresult ;
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  Skybox *result = 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  result = (Skybox *)(arg1)->getSkybox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_updateListener(void * jarg1) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  (arg1)->updateListener();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OCamera_enable(void * jarg1) {
  Neo::OCamera *arg1 = (Neo::OCamera *) 0 ;
  
  arg1 = (Neo::OCamera *)jarg1; 
  (arg1)->enable();
}


SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OEntity_SWIGUpcast(Neo::OEntity *jarg1) {
    return (Neo::Object3d *)jarg1;
}

SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OLight_SWIGUpcast(Neo::OLight *jarg1) {
    return (Neo::Object3d *)jarg1;
}

SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OSound_SWIGUpcast(Neo::OSound *jarg1) {
    return (Neo::Object3d *)jarg1;
}

SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OText_SWIGUpcast(Neo::OText *jarg1) {
    return (Neo::Object3d *)jarg1;
}

SWIGEXPORT Neo::Object3d * SWIGSTDCALL CSharp_OCamera_SWIGUpcast(Neo::OCamera *jarg1) {
    return (Neo::Object3d *)jarg1;
}

#ifdef __cplusplus
}
#endif

