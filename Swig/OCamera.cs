//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class OCamera : Object3d {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal OCamera(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NeoNativeEnginePINVOKE.OCamera_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OCamera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OCamera() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_OCamera(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public OCamera() : this(NeoNativeEnginePINVOKE.new_OCamera__SWIG_0(), true) {
  }

  public OCamera(OCamera camera) : this(NeoNativeEnginePINVOKE.new_OCamera__SWIG_1(OCamera.getCPtr(camera)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int getType() {
    int ret = NeoNativeEnginePINVOKE.OCamera_getType(swigCPtr);
    return ret;
  }

  public void enableFog(bool fog) {
    NeoNativeEnginePINVOKE.OCamera_enableFog(swigCPtr, fog);
  }

  public Vector3 getFogColor() {
    Vector3 ret = new Vector3(NeoNativeEnginePINVOKE.OCamera_getFogColor(swigCPtr), true);
    return ret;
  }

  public void setFogColor(Vector3 color) {
    NeoNativeEnginePINVOKE.OCamera_setFogColor(swigCPtr, Vector3.getCPtr(color));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void enableOrtho(bool ortho) {
    NeoNativeEnginePINVOKE.OCamera_enableOrtho(swigCPtr, ortho);
  }

  public void setFov(float fov) {
    NeoNativeEnginePINVOKE.OCamera_setFov(swigCPtr, fov);
  }

  public void setFogDistance(float fogDistance) {
    NeoNativeEnginePINVOKE.OCamera_setFogDistance(swigCPtr, fogDistance);
  }

  public void setClippingNear(float clippingNear) {
    NeoNativeEnginePINVOKE.OCamera_setClippingNear(swigCPtr, clippingNear);
  }

  public void setClippingFar(float clippingFar) {
    NeoNativeEnginePINVOKE.OCamera_setClippingFar(swigCPtr, clippingFar);
  }

  public bool isOrtho() {
    bool ret = NeoNativeEnginePINVOKE.OCamera_isOrtho(swigCPtr);
    return ret;
  }

  public bool hasFog() {
    bool ret = NeoNativeEnginePINVOKE.OCamera_hasFog(swigCPtr);
    return ret;
  }

  public float getClippingNear() {
    float ret = NeoNativeEnginePINVOKE.OCamera_getClippingNear(swigCPtr);
    return ret;
  }

  public float getClippingFar() {
    float ret = NeoNativeEnginePINVOKE.OCamera_getClippingFar(swigCPtr);
    return ret;
  }

  public float getFov() {
    float ret = NeoNativeEnginePINVOKE.OCamera_getFov(swigCPtr);
    return ret;
  }

  public float getFogDistance() {
    float ret = NeoNativeEnginePINVOKE.OCamera_getFogDistance(swigCPtr);
    return ret;
  }

  public void setClearColor(Vector3 clearColor) {
    NeoNativeEnginePINVOKE.OCamera_setClearColor(swigCPtr, Vector3.getCPtr(clearColor));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getClearColor() {
    Vector3 ret = new Vector3(NeoNativeEnginePINVOKE.OCamera_getClearColor(swigCPtr), true);
    return ret;
  }

  public Vector3 getProjectedPoint(Vector3 point) {
    Vector3 ret = new Vector3(NeoNativeEnginePINVOKE.OCamera_getProjectedPoint(swigCPtr, Vector3.getCPtr(point)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 getUnProjectedPoint(Vector3 point) {
    Vector3 ret = new Vector3(NeoNativeEnginePINVOKE.OCamera_getUnProjectedPoint(swigCPtr, Vector3.getCPtr(point)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Matrix4x4 getCurrentViewMatrix() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OCamera_getCurrentViewMatrix(swigCPtr);
    Matrix4x4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix4x4(cPtr, false);
    return ret;
  }

  public Matrix4x4 getCurrentProjMatrix() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OCamera_getCurrentProjMatrix(swigCPtr);
    Matrix4x4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Matrix4x4(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_int getCurrentViewport() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OCamera_getCurrentViewport(swigCPtr);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Frustum getFrustum() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OCamera_getFrustum(swigCPtr);
    SWIGTYPE_p_Frustum ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Frustum(cPtr, false);
    return ret;
  }

  public void setSceneLayer(uint sceneLayer) {
    NeoNativeEnginePINVOKE.OCamera_setSceneLayer(swigCPtr, sceneLayer);
  }

  public uint getSceneLayer() {
    uint ret = NeoNativeEnginePINVOKE.OCamera_getSceneLayer(swigCPtr);
    return ret;
  }

  public void setRenderColorTexture(SWIGTYPE_p_Neo__TextureRef renderColorTexture) {
    NeoNativeEnginePINVOKE.OCamera_setRenderColorTexture(swigCPtr, SWIGTYPE_p_Neo__TextureRef.getCPtr(renderColorTexture));
  }

  public void setRenderDepthTexture(SWIGTYPE_p_Neo__TextureRef renderDepthTexture) {
    NeoNativeEnginePINVOKE.OCamera_setRenderDepthTexture(swigCPtr, SWIGTYPE_p_Neo__TextureRef.getCPtr(renderDepthTexture));
  }

  public SWIGTYPE_p_Neo__TextureRef getRenderColorTexture() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OCamera_getRenderColorTexture(swigCPtr);
    SWIGTYPE_p_Neo__TextureRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Neo__TextureRef(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Neo__TextureRef getRenderDepthTexture() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OCamera_getRenderDepthTexture(swigCPtr);
    SWIGTYPE_p_Neo__TextureRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Neo__TextureRef(cPtr, false);
    return ret;
  }

  public void drawSkybox() {
    NeoNativeEnginePINVOKE.OCamera_drawSkybox(swigCPtr);
  }

  public void loadSkybox(string path) {
    NeoNativeEnginePINVOKE.OCamera_loadSkybox(swigCPtr, path);
  }

  public SWIGTYPE_p_Skybox getSkybox() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OCamera_getSkybox(swigCPtr);
    SWIGTYPE_p_Skybox ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Skybox(cPtr, false);
    return ret;
  }

  public void updateListener() {
    NeoNativeEnginePINVOKE.OCamera_updateListener(swigCPtr);
  }

  public void enable() {
    NeoNativeEnginePINVOKE.OCamera_enable(swigCPtr);
  }

}
