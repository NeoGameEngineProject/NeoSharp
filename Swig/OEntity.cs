/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class OEntity : Object3d {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal OEntity(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NeoNativeEnginePINVOKE.OEntity_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OEntity obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OEntity() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_OEntity(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public OEntity(SWIGTYPE_p_Neo__MeshRef meshRef) : this(NeoNativeEnginePINVOKE.new_OEntity__SWIG_0(SWIGTYPE_p_Neo__MeshRef.getCPtr(meshRef)), true) {
  }

  public OEntity(OEntity entity) : this(NeoNativeEnginePINVOKE.new_OEntity__SWIG_1(OEntity.getCPtr(entity)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void enableOccluder(bool value) {
    NeoNativeEnginePINVOKE.OEntity_enableOccluder(swigCPtr, value);
  }

  public bool isOccluder() {
    bool ret = NeoNativeEnginePINVOKE.OEntity_isOccluder(swigCPtr);
    return ret;
  }

  public override int getType() {
    int ret = NeoNativeEnginePINVOKE.OEntity_getType(swigCPtr);
    return ret;
  }

  public override void setActive(bool active) {
    NeoNativeEnginePINVOKE.OEntity_setActive(swigCPtr, active);
  }

  public void setInvisible(bool invisible) {
    NeoNativeEnginePINVOKE.OEntity_setInvisible(swigCPtr, invisible);
  }

  public bool isInvisible() {
    bool ret = NeoNativeEnginePINVOKE.OEntity_isInvisible(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Mesh getMesh() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OEntity_getMesh(swigCPtr);
    SWIGTYPE_p_Mesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Mesh(cPtr, false);
    return ret;
  }

  public void setMeshRef(SWIGTYPE_p_Neo__MeshRef meshRef) {
    NeoNativeEnginePINVOKE.OEntity_setMeshRef(swigCPtr, SWIGTYPE_p_Neo__MeshRef.getCPtr(meshRef));
  }

  public SWIGTYPE_p_Neo__MeshRef getMeshRef() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OEntity_getMeshRef(swigCPtr);
    SWIGTYPE_p_Neo__MeshRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Neo__MeshRef(cPtr, false);
    return ret;
  }

  public void changeAnimation(uint animationId) {
    NeoNativeEnginePINVOKE.OEntity_changeAnimation(swigCPtr, animationId);
  }

  public bool isAnimationOver() {
    bool ret = NeoNativeEnginePINVOKE.OEntity_isAnimationOver(swigCPtr);
    return ret;
  }

  public void setAnimationSpeed(float animationSpeed) {
    NeoNativeEnginePINVOKE.OEntity_setAnimationSpeed(swigCPtr, animationSpeed);
  }

  public void setCurrentFrame(float currentFrame) {
    NeoNativeEnginePINVOKE.OEntity_setCurrentFrame(swigCPtr, currentFrame);
  }

  public uint getAnimationId() {
    uint ret = NeoNativeEnginePINVOKE.OEntity_getAnimationId(swigCPtr);
    return ret;
  }

  public float getAnimationSpeed() {
    float ret = NeoNativeEnginePINVOKE.OEntity_getAnimationSpeed(swigCPtr);
    return ret;
  }

  public float getCurrentFrame() {
    float ret = NeoNativeEnginePINVOKE.OEntity_getCurrentFrame(swigCPtr);
    return ret;
  }

  public void deletePhysicsProperties() {
    NeoNativeEnginePINVOKE.OEntity_deletePhysicsProperties(swigCPtr);
  }

  public PhysicsProperties createPhysicsProperties() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OEntity_createPhysicsProperties(swigCPtr);
    PhysicsProperties ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhysicsProperties(cPtr, false);
    return ret;
  }

  public PhysicsProperties getPhysicsProperties() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OEntity_getPhysicsProperties(swigCPtr);
    PhysicsProperties ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhysicsProperties(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Box3d getBoundingBox() {
    global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.OEntity_getBoundingBox(swigCPtr);
    SWIGTYPE_p_Box3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Box3d(cPtr, false);
    return ret;
  }

  public bool hasShadow() {
    bool ret = NeoNativeEnginePINVOKE.OEntity_hasShadow(swigCPtr);
    return ret;
  }

  public void enableShadow(bool shadow) {
    NeoNativeEnginePINVOKE.OEntity_enableShadow(swigCPtr, shadow);
  }

  public override void update() {
    NeoNativeEnginePINVOKE.OEntity_update(swigCPtr);
  }

  public override void updateVisibility(OCamera camera) {
    NeoNativeEnginePINVOKE.OEntity_updateVisibility(swigCPtr, OCamera.getCPtr(camera));
  }

}
