//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class OLight : Object3d {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal OLight(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NeoNativeEnginePINVOKE.OLight_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OLight obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OLight() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_OLight(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public OLight() : this(NeoNativeEnginePINVOKE.new_OLight__SWIG_0(), true) {
  }

  public OLight(OLight light) : this(NeoNativeEnginePINVOKE.new_OLight__SWIG_1(OLight.getCPtr(light)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public override int getType() {
    int ret = NeoNativeEnginePINVOKE.OLight_getType(swigCPtr);
    return ret;
  }

  public void setLightType(LIGHT_TYPES lightType) {
    NeoNativeEnginePINVOKE.OLight_setLightType(swigCPtr, (int)lightType);
  }

  public LIGHT_TYPES getLightType() {
    LIGHT_TYPES ret = (LIGHT_TYPES)NeoNativeEnginePINVOKE.OLight_getLightType(swigCPtr);
    return ret;
  }

  public void castShadow(bool shadow) {
    NeoNativeEnginePINVOKE.OLight_castShadow(swigCPtr, shadow);
  }

  public void setShadowQuality(uint shadowQuality) {
    NeoNativeEnginePINVOKE.OLight_setShadowQuality(swigCPtr, shadowQuality);
  }

  public void setShadowBias(float shadowBias) {
    NeoNativeEnginePINVOKE.OLight_setShadowBias(swigCPtr, shadowBias);
  }

  public void setShadowBlur(float shadowBlur) {
    NeoNativeEnginePINVOKE.OLight_setShadowBlur(swigCPtr, shadowBlur);
  }

  public bool isCastingShadow() {
    bool ret = NeoNativeEnginePINVOKE.OLight_isCastingShadow(swigCPtr);
    return ret;
  }

  public uint getShadowQuality() {
    uint ret = NeoNativeEnginePINVOKE.OLight_getShadowQuality(swigCPtr);
    return ret;
  }

  public float getShadowBias() {
    float ret = NeoNativeEnginePINVOKE.OLight_getShadowBias(swigCPtr);
    return ret;
  }

  public float getShadowBlur() {
    float ret = NeoNativeEnginePINVOKE.OLight_getShadowBlur(swigCPtr);
    return ret;
  }

  public void setRadius(float radius) {
    NeoNativeEnginePINVOKE.OLight_setRadius(swigCPtr, radius);
  }

  public float getRadius() {
    float ret = NeoNativeEnginePINVOKE.OLight_getRadius(swigCPtr);
    return ret;
  }

  public void setIntensity(float intensity) {
    NeoNativeEnginePINVOKE.OLight_setIntensity(swigCPtr, intensity);
  }

  public void setColor(Vector3 color) {
    NeoNativeEnginePINVOKE.OLight_setColor(swigCPtr, Vector3.getCPtr(color));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getIntensity() {
    float ret = NeoNativeEnginePINVOKE.OLight_getIntensity(swigCPtr);
    return ret;
  }

  public Vector3 getColor() {
    Vector3 ret = new Vector3(NeoNativeEnginePINVOKE.OLight_getColor(swigCPtr), true);
    return ret;
  }

  public Vector3 getFinalColor() {
    Vector3 ret = new Vector3(NeoNativeEnginePINVOKE.OLight_getFinalColor(swigCPtr), true);
    return ret;
  }

  public void setSpotAngle(float angle) {
    NeoNativeEnginePINVOKE.OLight_setSpotAngle(swigCPtr, angle);
  }

  public void setSpotExponent(float exponent) {
    NeoNativeEnginePINVOKE.OLight_setSpotExponent(swigCPtr, exponent);
  }

  public float getSpotAngle() {
    float ret = NeoNativeEnginePINVOKE.OLight_getSpotAngle(swigCPtr);
    return ret;
  }

  public float getSpotExponent() {
    float ret = NeoNativeEnginePINVOKE.OLight_getSpotExponent(swigCPtr);
    return ret;
  }

  public override void updateVisibility(OCamera camera) {
    NeoNativeEnginePINVOKE.OLight_updateVisibility(swigCPtr, OCamera.getCPtr(camera));
  }

}
