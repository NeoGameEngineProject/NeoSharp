/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class MMatrix4x4 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MMatrix4x4(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MMatrix4x4 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MMatrix4x4() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_MMatrix4x4(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_float entries {
    set {
      NeoNativeEnginePINVOKE.MMatrix4x4_entries_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.MMatrix4x4_entries_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public MMatrix4x4() : this(NeoNativeEnginePINVOKE.new_MMatrix4x4__SWIG_0(), true) {
  }

  public MMatrix4x4(float e0, float e1, float e2, float e3, float e4, float e5, float e6, float e7, float e8, float e9, float e10, float e11, float e12, float e13, float e14, float e15) : this(NeoNativeEnginePINVOKE.new_MMatrix4x4__SWIG_1(e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15), true) {
  }

  public MMatrix4x4(SWIGTYPE_p_float value) : this(NeoNativeEnginePINVOKE.new_MMatrix4x4__SWIG_2(SWIGTYPE_p_float.getCPtr(value)), true) {
  }

  public MMatrix4x4(MMatrix4x4 mat) : this(NeoNativeEnginePINVOKE.new_MMatrix4x4__SWIG_3(MMatrix4x4.getCPtr(mat)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void loadIdentity() {
    NeoNativeEnginePINVOKE.MMatrix4x4_loadIdentity(swigCPtr);
  }

  public void loadZero() {
    NeoNativeEnginePINVOKE.MMatrix4x4_loadZero(swigCPtr);
  }

  public void invert() {
    NeoNativeEnginePINVOKE.MMatrix4x4_invert(swigCPtr);
  }

  public void transpose() {
    NeoNativeEnginePINVOKE.MMatrix4x4_transpose(swigCPtr);
  }

  public void affineInvert() {
    NeoNativeEnginePINVOKE.MMatrix4x4_affineInvert(swigCPtr);
  }

  public void invertTranspose() {
    NeoNativeEnginePINVOKE.MMatrix4x4_invertTranspose(swigCPtr);
  }

  public void affineInvertTranspose() {
    NeoNativeEnginePINVOKE.MMatrix4x4_affineInvertTranspose(swigCPtr);
  }

  public void scale(MVector3 scaleFactor) {
    NeoNativeEnginePINVOKE.MMatrix4x4_scale(swigCPtr, MVector3.getCPtr(scaleFactor));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void rotate(MVector3 axis, float angle) {
    NeoNativeEnginePINVOKE.MMatrix4x4_rotate(swigCPtr, MVector3.getCPtr(axis), angle);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void translate(MVector3 translate) {
    NeoNativeEnginePINVOKE.MMatrix4x4_translate(swigCPtr, MVector3.getCPtr(translate));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setEntry(int position, float value) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setEntry(swigCPtr, position, value);
  }

  public void setScale(MVector3 scaleFactor) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setScale(swigCPtr, MVector3.getCPtr(scaleFactor));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUniformScale(float size) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setUniformScale(swigCPtr, size);
  }

  public void setTranslation(MVector3 translation) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setTranslation(swigCPtr, MVector3.getCPtr(translation));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTranslationPart(MVector3 translation) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setTranslationPart(swigCPtr, MVector3.getCPtr(translation));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRotationAxis(float angle, MVector3 axis) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setRotationAxis(swigCPtr, angle, MVector3.getCPtr(axis));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRotationX(float angle) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setRotationX(swigCPtr, angle);
  }

  public void setRotationY(float angle) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setRotationY(swigCPtr, angle);
  }

  public void setRotationZ(float angle) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setRotationZ(swigCPtr, angle);
  }

  public void setRotationEuler(float angleX, float angleY, float angleZ) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setRotationEuler(swigCPtr, angleX, angleY, angleZ);
  }

  public void setRotationPartEuler(float angleX, float angleY, float angleZ) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setRotationPartEuler__SWIG_0(swigCPtr, angleX, angleY, angleZ);
  }

  public void setRotationPartEuler(MVector3 rotations) {
    NeoNativeEnginePINVOKE.MMatrix4x4_setRotationPartEuler__SWIG_1(swigCPtr, MVector3.getCPtr(rotations));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getEntry(int position) {
    float ret = NeoNativeEnginePINVOKE.MMatrix4x4_getEntry(swigCPtr, position);
    return ret;
  }

  public MVector3 getRotatedVector3(MVector3 vec) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MMatrix4x4_getRotatedVector3(swigCPtr, MVector3.getCPtr(vec)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector3 getInverseRotatedVector3(MVector3 vec) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MMatrix4x4_getInverseRotatedVector3(swigCPtr, MVector3.getCPtr(vec)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector3 getTranslatedVector3(MVector3 vec) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MMatrix4x4_getTranslatedVector3(swigCPtr, MVector3.getCPtr(vec)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector3 getInversetranslatedVector3(MVector3 vec) {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MMatrix4x4_getInversetranslatedVector3(swigCPtr, MVector3.getCPtr(vec)), true);
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MVector3 getTranslationPart() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MMatrix4x4_getTranslationPart(swigCPtr), true);
    return ret;
  }

  public MVector3 getEulerAngles() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MMatrix4x4_getEulerAngles(swigCPtr), true);
    return ret;
  }

  public MVector3 getScale() {
    MVector3 ret = new MVector3(NeoNativeEnginePINVOKE.MMatrix4x4_getScale(swigCPtr), true);
    return ret;
  }

  public MVector4 getRow(int position) {
    MVector4 ret = new MVector4(NeoNativeEnginePINVOKE.MMatrix4x4_getRow(swigCPtr, position), true);
    return ret;
  }

  public MVector4 getColumn(int position) {
    MVector4 ret = new MVector4(NeoNativeEnginePINVOKE.MMatrix4x4_getColumn(swigCPtr, position), true);
    return ret;
  }

  public MMatrix4x4 getInverse() {
    MMatrix4x4 ret = new MMatrix4x4(NeoNativeEnginePINVOKE.MMatrix4x4_getInverse(swigCPtr), true);
    return ret;
  }

  public MMatrix4x4 getTranspose() {
    MMatrix4x4 ret = new MMatrix4x4(NeoNativeEnginePINVOKE.MMatrix4x4_getTranspose(swigCPtr), true);
    return ret;
  }

  public MMatrix4x4 getInversetranspose() {
    MMatrix4x4 ret = new MMatrix4x4(NeoNativeEnginePINVOKE.MMatrix4x4_getInversetranspose(swigCPtr), true);
    return ret;
  }

  public MMatrix4x4 getAffineInverse() {
    MMatrix4x4 ret = new MMatrix4x4(NeoNativeEnginePINVOKE.MMatrix4x4_getAffineInverse(swigCPtr), true);
    return ret;
  }

  public MMatrix4x4 getAffineInverseTranspose() {
    MMatrix4x4 ret = new MMatrix4x4(NeoNativeEnginePINVOKE.MMatrix4x4_getAffineInverseTranspose(swigCPtr), true);
    return ret;
  }

  public void rotateVector3(MVector3 vec) {
    NeoNativeEnginePINVOKE.MMatrix4x4_rotateVector3(swigCPtr, MVector3.getCPtr(vec));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void inverseRotateVector3(MVector3 vec) {
    NeoNativeEnginePINVOKE.MMatrix4x4_inverseRotateVector3(swigCPtr, MVector3.getCPtr(vec));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void translateVector3(MVector3 vec) {
    NeoNativeEnginePINVOKE.MMatrix4x4_translateVector3(swigCPtr, MVector3.getCPtr(vec));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void inversetranslateVector3(MVector3 vec) {
    NeoNativeEnginePINVOKE.MMatrix4x4_inversetranslateVector3(swigCPtr, MVector3.getCPtr(vec));
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

}
