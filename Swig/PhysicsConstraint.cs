//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PhysicsConstraint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PhysicsConstraint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PhysicsConstraint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PhysicsConstraint() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NeoNativeEnginePINVOKE.delete_PhysicsConstraint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public PhysicsConstraint() : this(NeoNativeEnginePINVOKE.new_PhysicsConstraint__SWIG_0(), true) {
  }

  public PhysicsConstraint(PhysicsConstraint constraint) : this(NeoNativeEnginePINVOKE.new_PhysicsConstraint__SWIG_1(PhysicsConstraint.getCPtr(constraint)), true) {
    if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint constraintId {
    set {
      NeoNativeEnginePINVOKE.PhysicsConstraint_constraintId_set(swigCPtr, value);
    } 
    get {
      uint ret = NeoNativeEnginePINVOKE.PhysicsConstraint_constraintId_get(swigCPtr);
      return ret;
    } 
  }

  public uint parentObjectId {
    set {
      NeoNativeEnginePINVOKE.PhysicsConstraint_parentObjectId_set(swigCPtr, value);
    } 
    get {
      uint ret = NeoNativeEnginePINVOKE.PhysicsConstraint_parentObjectId_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_String parentName {
    set {
      NeoNativeEnginePINVOKE.PhysicsConstraint_parentName_set(swigCPtr, SWIGTYPE_p_String.getCPtr(value));
      if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_String ret = new SWIGTYPE_p_String(NeoNativeEnginePINVOKE.PhysicsConstraint_parentName_get(swigCPtr), true);
      if (NeoNativeEnginePINVOKE.SWIGPendingException.Pending) throw NeoNativeEnginePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Vector3 pivot {
    set {
      NeoNativeEnginePINVOKE.PhysicsConstraint_pivot_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.PhysicsConstraint_pivot_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 lowerLinearLimit {
    set {
      NeoNativeEnginePINVOKE.PhysicsConstraint_lowerLinearLimit_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.PhysicsConstraint_lowerLinearLimit_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 upperLinearLimit {
    set {
      NeoNativeEnginePINVOKE.PhysicsConstraint_upperLinearLimit_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.PhysicsConstraint_upperLinearLimit_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 lowerAngularLimit {
    set {
      NeoNativeEnginePINVOKE.PhysicsConstraint_lowerAngularLimit_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.PhysicsConstraint_lowerAngularLimit_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 upperAngularLimit {
    set {
      NeoNativeEnginePINVOKE.PhysicsConstraint_upperAngularLimit_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NeoNativeEnginePINVOKE.PhysicsConstraint_upperAngularLimit_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public bool disableParentCollision {
    set {
      NeoNativeEnginePINVOKE.PhysicsConstraint_disableParentCollision_set(swigCPtr, value);
    } 
    get {
      bool ret = NeoNativeEnginePINVOKE.PhysicsConstraint_disableParentCollision_get(swigCPtr);
      return ret;
    } 
  }

}
